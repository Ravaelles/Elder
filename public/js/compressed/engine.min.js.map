{"version":3,"sources":["engine-view.js","unit-extra.js","unit.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnzfile":"engine.min.js","sourcesContent":["function EngineView(width, height) {\r\n\r\n    this.width = -1;\r\n    this.height = -1;\r\n\r\n    // =========================================================================\r\n\r\n    this.constructor = function (width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n    };\r\n    this.constructor(width, height);\r\n\r\n    // =========================================================================\r\n\r\n    this.getType = function () {\r\n        return this.type;\r\n    };\r\n\r\n}","function buildStyleStringForImg(image, unit, staticImageMode, imageWrapperSelector, width, height) {\r\n    var styleString = \"position: relative; \";\r\n\r\n    // =========================================================================\r\n    // Handle static mode (just ui animation) or regular, engine mode\r\n    if (staticImageMode) {\r\n        image.marginLeft = imageWrapperSelector.width() / 2 - width / 2;\r\n        image.marginTop = imageWrapperSelector.height() / 2 - height / 2;\r\n\r\n        if (unit._action === SPEAR_EQUIP || unit._action === SPEAR_UNEQUIP) {\r\n            image.marginTop -= 18;\r\n            image.marginLeft -= 17;\r\n        }\r\n    }\r\n    else {\r\n        image.marginLeft = -width / 2;\r\n        image.marginTop = -height;\r\n\r\n        // =========================================================================\r\n        // Alter WALK animations\r\n        if (unit.isActionWalk()) {\r\n\r\n            // Define horizontal movement factor\r\n            if (unit.isActionWithWeapon(WEAPON_SPEAR)) {\r\n                var walkFactor = 0.25; // Spear\r\n                var diagonalWalkFactor = 0.3;\r\n            }\r\n            else {\r\n                var walkFactor = 0.38; // Walk\r\n                var diagonalWalkFactor = 0.32;\r\n            }\r\n\r\n            // Define diagonal movement favtor\r\n            var walkToNorthMarginTopBonus = height / 5;\r\n\r\n            if (unit._dir === DIR_E) {\r\n                image.marginLeft += width * walkFactor;\r\n            }\r\n            else if (unit._dir === DIR_W) {\r\n                image.marginLeft += (-width * walkFactor);\r\n            }\r\n            else if (unit._dir === DIR_SE) {\r\n                image.marginLeft += width * diagonalWalkFactor;\r\n                image.marginTop += height * diagonalWalkFactor;\r\n            }\r\n            else if (unit._dir === DIR_SW) {\r\n                image.marginLeft -= width * diagonalWalkFactor;\r\n                image.marginTop += height * diagonalWalkFactor;\r\n            }\r\n            else if (unit._dir === DIR_NW) {\r\n                image.marginLeft += (-width * diagonalWalkFactor);\r\n                image.marginTop += (-height * diagonalWalkFactor + walkToNorthMarginTopBonus);\r\n            }\r\n            else if (unit._dir === DIR_NE) {\r\n                image.marginLeft += width * diagonalWalkFactor;\r\n                image.marginTop += (-height * diagonalWalkFactor + walkToNorthMarginTopBonus);\r\n            }\r\n        }\r\n\r\n        // =========================================================================\r\n        // Alter SPEAR\r\n        if (unit._action === SPEAR_EQUIP || unit._action === SPEAR_UNEQUIP) {\r\n            if (unit._dir === DIR_SE) {\r\n                image.marginLeft -= 14;\r\n                image.marginTop += 8;\r\n            }\r\n            else if (unit._dir === DIR_SW) {\r\n                image.marginLeft -= 18.5;\r\n            }\r\n            else if (unit._dir === DIR_NE) {\r\n                image.marginLeft += 18;\r\n                image.marginTop += 3.5;\r\n            }\r\n            else if (unit._dir === DIR_NW) {\r\n                image.marginLeft += 15;\r\n            }\r\n            else if (unit._dir === DIR_E) {\r\n                image.marginLeft -= 5;\r\n                image.marginTop += 12;\r\n            }\r\n            else if (unit._dir === DIR_W) {\r\n                image.marginLeft += 4;\r\n            }\r\n        }\r\n    }\r\n\r\n    // =========================================================================\r\n    // Include position factor\r\n    image.marginLeft += unit.positionPX;\r\n    image.marginTop += unit.positionPY;\r\n\r\n    // =========================================================================\r\n    // Handle margin\r\n    if (image.marginLeft) {\r\n        styleString += \"left:\" + image.marginLeft + \"px; \"\r\n    }\r\n    if (image.marginTop) {\r\n        styleString += \"top:\" + image.marginTop + \"px; \"\r\n        styleString += \"z-index: \" + (image.marginTop + height) + \"; \"\r\n    }\r\n    //                styleString += \"border: 1px solid red !important; \";\r\n\r\n    return styleString;\r\n}\r\n\r\n// =========================================================================\r\n\r\n// Actions\r\nACTION_IDLE = \"aa\";\r\nACTION_WALK = \"ab\";\r\nACTION_CLIMB_UP = \"ae\";\r\nACTION_PICK_UP = \"ak\";\r\nACTION_USE = \"al\";\r\nACTION_DODGE = \"an\";\r\nACTION_HIT = \"ao\";\r\nACTION_HIT2 = \"ap\";\r\nACTION_HAND_COMBAT = \"aq\";\r\nACTION_KICK = \"ar\";\r\nACTION_THROW = \"as\";\r\nACTION_RUN = \"at\";\r\nACTION_RANDOM_STATIC = \"RANDOM_STATIC\";\r\n// =========================================================================\r\n// Spear actions\r\nSPEAR_IDLE = \"ga\";\r\nSPEAR_WALK = \"gb\";\r\nSPEAR_EQUIP = \"gc\";\r\nSPEAR_UNEQUIP = \"gd\";\r\nSPEAR_DODGE = \"ge\";\r\nSPEAR_THRUST = \"gf\";\r\nSPEAR_THROW = \"gm\";\r\nSPEAR_RANDOM = \"RANDOM_SPEAR\";\r\n\r\n// =========================================================================\r\n// Weapons\r\nWEAPON_SPEAR = \"SPEAR\";\r\nWEAPON_10MM_PISTOL = \"10MM\";\r\n\r\n// =========================================================================\r\n// Direction\r\nDIR_W = \"w\";\r\nDIR_E = \"e\";\r\nDIR_NW = \"nw\";\r\nDIR_NE = \"ne\";\r\nDIR_SW = \"sw\";\r\nDIR_SE = \"se\";\r\nDIR_ALL = [DIR_W, DIR_E, DIR_NW, DIR_NE, DIR_SW, DIR_SE];\r\nfunction DIR_RANDOM() {\r\n    return randElem(DIR_ALL);\r\n}\r\nfunction DIR_RANDOM_SOUTH() {\r\n    return randElem([DIR_SW, DIR_SE]);\r\n}\r\nfunction DIR_RANDOM_NORTH() {\r\n    return randElem([DIR_NW, DIR_NE]);\r\n}\r\n\r\n// =========================================================================\r\n// People\r\nWARRIOR_MALE = \"warr\";\r\nWARRIOR_FEMALE = \"prim\";\r\nSEX_GIRL = \"/img/special/sex-girl.png\";\r\n// =========================================================================\r\n// Nature\r\nNATURE_TREE = \"nature_tree\";\r\nNATURE_GRASS = \"nature_grass\";\r\n// =========================================================================\r\n// Sex\r\nMALE = \"nm\";\r\nFEMALE = \"nf\";\r\n","/* global DIR_E, DIR_W, DIR_SW, DIR_NW, DIR_NE, DIR_SE, WEAPON_SPEAR, MALE, ACTION_IDLE, engineView */\r\n\r\nvar BASE_IMG_DIR = \"/img/critter/\";\r\nvar WALK_ANIMATION_LENGTH = 800;\r\nvar WALK_ANIMATION_MODIFIER_WHEN_FIRST = 100;\r\n\r\n// =========================================================================\r\n\r\nvar allUnits = [];\r\n\r\nvar numOfImages = [];\r\nnumOfImages['grass'] = 5;\r\nnumOfImages['misc'] = 5;\r\nnumOfImages['tree'] = 6;\r\n\r\n/**\r\n * This class represents animated unit/sprite/type to be displayed in the browser.\r\n * It's possible to change unit and animate it using animate() function. Commands can be chained like:\r\n * <p>var unit = new Unit(json).create()</p>\r\n *\r\n * Unit is identified by:\r\n * - sex - MALE/FEMALE\r\n * - dir - direction unit is facing - DIR_E, DIR_W, DIR_SE, DIR_SW, DIR_NE, DIR_NW 0\r\n * - action - currently executed action - choose one of many constans prefixed ACTION_, SPEAR_ etc\r\n * - type - Fallout identifier of the type in the gif, use constants lik WARRIOR_MALE, WARRIOR_FEMALE etc\r\n *\r\n * @param json json string that will be used to create object\r\n * @returns Unit\r\n */\r\nfunction Unit(json) {\r\n\r\n    this._id = null; // Unique identifier for the unit\r\n    this._sex = null; // Sex of this unit, use MALE or FEMALE\r\n    this._action = null; // Curenntly executed action, use ACTION_* and others\r\n    this._dir = null; // Direction unit is facing, use DIR_*\r\n    this._type = null; // Type of this unit e.g. WARRIOR_MALE, WARRIOR_FEMALE\r\n\r\n    this.staticImageDisplayMode = false;\r\n    this.marginLeft = 0;\r\n    this.marginTop = 0;\r\n\r\n    this.positionPX = 0; // Position X in pixels\r\n    this.positionPY = 0; // Position Y in pixels\r\n\r\n    this._lastAnimationEndsAt = 0;\r\n    this._divSelector = null;\r\n\r\n    // =========================================================================\r\n    // Constructor\r\n\r\n    this.constructor = function (json) {\r\n        var parameters;\r\n        if (typeof json === 'string') {\r\n            parameters = JSON.parse(json);\r\n        } else {\r\n            parameters = json;\r\n        }\r\n\r\n        this._id = parameters['id'] ? parameters['id'] : __firstFreeUnitId++;\r\n        this._sex = parameters['sex'] ? (\"n\" + parameters['sex'].toLowerCase()) : MALE;\r\n        this._action = parameters['action'] ? parameters['action'] : ACTION_IDLE;\r\n        this._dir = parameters['dir'] ? parameters['dir'] : DIR_SE;\r\n        this._type = parameters['type'];\r\n\r\n        if (!this._type) {\r\n            console.log(\"Empty unit type for unit:\");\r\n            console.log(this);\r\n            alert(\"Empty unit type passed for new unit\");\r\n        }\r\n\r\n        allUnits[this._id] = this;\r\n    };\r\n    this.constructor(json);\r\n\r\n    // =========================================================================\r\n    // Display\r\n\r\n    this.display = function (staticImageDisplayMode) {\r\n        this.staticImageDisplayMode = staticImageDisplayMode;\r\n\r\n        var imgObject = this.createImageElement();\r\n        var imageElement = imgObject['imageElement'];\r\n        var imagePath = imgObject['imagePath'];\r\n\r\n        // =========================================================================\r\n        // Create wrapper for the image if needed\r\n\r\n        if (!this.staticImageDisplayMode) {\r\n            this.createImageWrapper();\r\n        }\r\n\r\n        // =========================================================================\r\n\r\n        var imageObject = new Image();\r\n        imageObject.unitId = this._id;\r\n        imageObject.unit = this;\r\n        imageObject.imageIsLoaded = false;\r\n\r\n        function reloadImage(unitId, imgSource) {\r\n//            $('#unit-img-' + unitId).attr('src', imgSource);\r\n//            $('#unit-img-' + unitId).attr('src', \"/img/empty.jpg\");\r\n            $('#unit-img-' + unitId).attr('src', imgSource);\r\n        }\r\n\r\n        // Define image onload callback\r\n        imageObject.onload = function (event) {\r\n            var debugString = \"<script>$('#unit-img-\" + this.unitId + \"').css('border', '1px solid rgba(255,0,0,0.2)')</script>\";\r\n            +\"<script>setTimeout(function() { $('#unit-img-\" + this.unitId + \"').css('border', 'none'); }, 1000)</script>\";\r\n            $(\"#canvas-debug\").html(debugString);\r\n            var imgSource = $('#unit-img-' + this.unitId).attr('src');\r\n//            $('#unit-img-' + this.unitId).attr('src', '');\r\n            reloadImage(this.unitId, imgSource);\r\n\r\n            if (this.imageIsLoaded) {\r\n                return;\r\n            } else {\r\n\r\n                var unit = this.unit;\r\n                this.imageIsLoaded = true;\r\n                this.src = imagePath;\r\n                var width = this.width;\r\n                var height = this.height;\r\n\r\n                var imageWrapperSelector = $(\"#unit-wrapper-\" + this.unitId);\r\n\r\n                // Add ready <img src=> element to the div wrapper, thus displaying the animation\r\n                imageWrapperSelector.html(imageElement);\r\n\r\n                // Assign current image dimensions to the image element\r\n                var imageSelector = $(\"#unit-img-\" + this.unitId);\r\n                unit._imageSelector = imageSelector;\r\n                imageSelector.attr({\"imgwidth\": width, \"imgheight\": height});\r\n                imageSelector.css('z-index', unit.positionPY);\r\n\r\n                // =========================================================================\r\n                // Add extra STYLE to wrapping div if needed\r\n\r\n                var styleString = buildStyleStringForImg(\r\n                        this, unit, staticImageDisplayMode, imageWrapperSelector, width, height\r\n                        );\r\n                if (styleString) {\r\n                    imageSelector.attr(\"style\", styleString);\r\n                }\r\n            }\r\n        };\r\n\r\n        // Assign image url\r\n        imageObject.src = imagePath;\r\n\r\n        return this;\r\n    };\r\n\r\n    // =========================================================================\r\n    // Animation\r\n\r\n    this._queueAnimations = [];\r\n\r\n    this.queueAnimation = function (options, delay, animationLength) {\r\n        var startAnimatingUnitAfterTime;\r\n        var lastAnimationEndedAgo = this.timeSinceLastAnimationEndedAgo();\r\n        var canStartAnimationNow = lastAnimationEndedAgo >= -20;\r\n\r\n        if (!animationLength) {\r\n            animationLength = WALK_ANIMATION_LENGTH;\r\n//            animationLength = 800;\r\n//            animationLength = 2890;\r\n        }\r\n        if (!delay) {\r\n            delay = 0;\r\n        }\r\n\r\n        // =========================================================================\r\n        // Define time when next animation could be potentially executed\r\n\r\n        if (canStartAnimationNow) {\r\n            startAnimatingUnitAfterTime = 0;\r\n            this._lastAnimationEndsAt = this.timeNow() + delay + animationLength;\r\n        } else {\r\n            startAnimatingUnitAfterTime = -lastAnimationEndedAgo;\r\n            this._lastAnimationEndsAt += delay + startAnimatingUnitAfterTime + animationLength;\r\n//            this._lastAnimationEndsAt += delay + startAnimatingUnitAfterTime + animationLength;\r\n        }\r\n\r\n        // =========================================================================\r\n        // Either run an animation now or queue it\r\n\r\n        // Run now\r\n        if (canStartAnimationNow && this._queueAnimations.length === 0) {\r\n            this._runAnimationNow(options, delay, animationLength);\r\n        }\r\n\r\n        // Doing something else now, so queue it\r\n        else {\r\n            var animationObject = {\r\n                'options': options,\r\n                'animationLength': animationLength,\r\n                'delay': delay\r\n            };\r\n            this._queueAnimations.push(animationObject);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    this._runAnimationNow = function (options, delay, animationLength) {\r\n        var unit = this;\r\n\r\n        setTimeout(function () {\r\n\r\n            // Run callback before the start of animation\r\n            var callbackAnimationAfterStart = options['callbackAnimationAfterStart'];\r\n            if (callbackAnimationAfterStart) {\r\n                callbackAnimationAfterStart(unit, options);\r\n            }\r\n\r\n            unit._animate(options);\r\n\r\n            // =========================================================================\r\n\r\n            setTimeout(function () {\r\n\r\n                // Run callback at the end of animation\r\n                var callbackAnimationEnded = options['callbackAnimationEnded'];\r\n                if (callbackAnimationEnded) {\r\n                    callbackAnimationEnded(unit);\r\n                }\r\n\r\n                // Run next animation in enqueued\r\n                unit.runNextQueuedAnimationIfNeeded();\r\n\r\n            }, animationLength, unit);\r\n        }, delay);\r\n\r\n        return this;\r\n    };\r\n\r\n    this.runNextQueuedAnimationIfNeeded = function () {\r\n        var nextAnimation = this._queueAnimations.shift();\r\n\r\n        if (nextAnimation !== undefined) {\r\n            var options = nextAnimation['options'];\r\n            var animationLength = nextAnimation['animationLength'];\r\n            var delay = nextAnimation['delay'];\r\n            this._runAnimationNow(options, delay, animationLength);\r\n        }\r\n    };\r\n\r\n    this._animate = function (options, afterTime) {\r\n        if (!afterTime) {\r\n            afterTime = 0;\r\n        }\r\n        if (!options) {\r\n            options = [];\r\n        }\r\n\r\n        // =========================================================================\r\n        // Animation started callback\r\n\r\n        var callbackAnimationBeforeStart = options['callbackAnimationBeforeStart'];\r\n        if (callbackAnimationBeforeStart) {\r\n            callbackAnimationBeforeStart(this);\r\n        }\r\n\r\n        // =========================================================================\r\n\r\n        var unit = this;\r\n        setTimeout(function () {\r\n            unit.handleOptions(options);\r\n            unit.display(unit.staticImageDisplayMode);\r\n        }, afterTime);\r\n\r\n        this._lastAnimationStarted += afterTime;\r\n\r\n        return this;\r\n    };\r\n\r\n    this.timeSinceLastAnimationEndedAgo = function () {\r\n        return this.timeNow() - this._lastAnimationEndsAt;\r\n    };\r\n\r\n    this.timeNow = function () {\r\n        return (new Date()).getTime();\r\n    };\r\n\r\n    // =========================================================================\r\n    // Animation generic\r\n\r\n    this.animation = function (options, delay, animationLength) {\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n        if (!animationLength) {\r\n            animationLength = 1700;\r\n        }\r\n        if (!delay || delay < 0) {\r\n            delay = 0;\r\n        }\r\n\r\n        this.queueAnimation(options, delay, animationLength);\r\n\r\n        return this;\r\n    };\r\n\r\n    // Walk\r\n\r\n    this.walk = function (options, delay) {\r\n//        var walkAnimationTimespan = 990;\r\n        var walkAnimationTimespan = WALK_ANIMATION_LENGTH +\r\n                +(this._queueAnimations.length === 0 ? WALK_ANIMATION_MODIFIER_WHEN_FIRST : 0);\r\n//        console.l  og(this._queueAnimations.length + \" / \" + walkAnimationTimespan);\r\n//        console.l  og(walkAnimationTimespan);\r\n        var lastAnimationEnded = this.timeSinceLastAnimationEndedAgo();\r\n        var startAnimatingUnitAfterTime;\r\n\r\n        if (!delay) {\r\n            delay = 0;\r\n        }\r\n        if (!options) {\r\n            options = [];\r\n        }\r\n\r\n        // =========================================================================\r\n\r\n        options['callbackAnimationAfterStart'] = function (unit, options) {\r\n            unit.convertActionToWalk();\r\n        };\r\n\r\n        options['callbackAnimationEnded'] = function (unit) {\r\n            unit.handleWalkPositionChange();\r\n\r\n            if (unit._queueAnimations.length === 0) {\r\n                unit.convertActionToIdle();\r\n                unit._animate();\r\n            }\r\n        };\r\n\r\n        this.queueAnimation(options, delay, walkAnimationTimespan);\r\n\r\n        return this;\r\n    };\r\n\r\n    this.convertActionToWalk = function () {\r\n        this._action = this._action.replaceAt(1, \"b\");\r\n        return this;\r\n    };\r\n\r\n    this.convertActionToIdle = function () {\r\n        this._action = this._action.replaceAt(1, \"a\");\r\n        return this;\r\n    };\r\n\r\n    this.handleWalkPositionChange = function () {\r\n        var fullStep = 82;\r\n        var halfStep = 36;\r\n\r\n        var dx = 0;\r\n        var dy = 0;\r\n\r\n        if (this._dir === DIR_E) {\r\n            dx += fullStep;\r\n        } else if (this._dir === DIR_W) {\r\n            dx -= fullStep;\r\n        } else if (this._dir === DIR_SE) {\r\n            dx += halfStep;\r\n            dy += halfStep;\r\n        } else if (this._dir === DIR_SW) {\r\n            dx -= halfStep;\r\n            dy += halfStep;\r\n        } else if (this._dir === DIR_NW) {\r\n            dx -= halfStep;\r\n            dy -= halfStep;\r\n        } else if (this._dir === DIR_NE) {\r\n            dx += halfStep;\r\n            dy -= halfStep;\r\n        }\r\n\r\n        this.positionPX += dx;\r\n        this.positionPY += dy;\r\n\r\n        return this;\r\n    };\r\n\r\n    // Equip weapons\r\n\r\n    this.equipWeapon = function (weaponName, delay) {\r\n        var options = {action: window[weaponName + \"_EQUIP\"]};\r\n        options['callbackAnimationEnded'] = function (unit) {\r\n            unit._action = window[weaponName + \"_IDLE\"];\r\n        };\r\n\r\n        if (weaponName === WEAPON_SPEAR) {\r\n            var animationLength = 1300;\r\n        } else {\r\n            var animationLength = 1300;\r\n        }\r\n\r\n        this.queueAnimation(options, delay, animationLength);\r\n        return this;\r\n    };\r\n\r\n    // =========================================================================\r\n    // Positioning\r\n\r\n    this.positionRandomly = function () {\r\n        this.positionPX = rand(0, engineView.width);\r\n        this.positionPY = rand(0, engineView.height);\r\n        return this;\r\n    };\r\n\r\n    this.position = function (x, y) {\r\n        if (!x && !y) {\r\n            return {x: this.positionPX, y: this.positionPY};\r\n        } else {\r\n            this.positionPX = x;\r\n            this.positionPY = y;\r\n            return this;\r\n        }\r\n    };\r\n\r\n    // =========================================================================\r\n    // HTML creation\r\n\r\n    this.createImageElement = function () {\r\n        var id = \"unit-img-\" + this._id;\r\n        var idString = this._id ? \"id='\" + id + \"'\" : \"\";\r\n        var imgClass = \"\";\r\n\r\n        // Animated image\r\n        if (!this.isStaticImage()) {\r\n            var imgName = BASE_IMG_DIR + \"all/\" + this._sex + this._type + this._action + \"_\" + this._dir;\r\n//            var imgName = \"/image/critter/all/\" + this._sex + this._type + this._action + \"_\" + this._dir;\r\n//            var randomString = \"?\" + rand(100000, 999999);\r\n//            var randomString = \"?\" + this._id + \"-\" + rand(0, 99999);\r\n//            var randomString = \"?\" + this._id;\r\n//            var imagePath = imgName + \".gif\" + randomString;\r\n//            var imagePath = imgName + \".gif?\" + this._id;\r\n            var imagePath = imgName + \".gif\";\r\n            imgClass = \"unit-alive\";\r\n//            specialAttributes = \"loop=infinite\";\r\n        }\r\n\r\n        // Static image\r\n        else {\r\n            var natureGroupName = this._type.substring(7);\r\n            var imgName = \"/img/nature/\" + natureGroupName + \"/\" + rand(1, numOfImages[natureGroupName]);\r\n            var imagePath = imgName + \".png\";\r\n        }\r\n\r\n        // =========================================================================\r\n        // Direction issues\r\n//        if (!this.isActionStatic()) {\r\n//            if (this.dirTowardEast()) {\r\n//                this.marginLeft = 0;\r\n//            }\r\n//            else if (this.dirTowardWest()) {\r\n//                this.marginLeft = 0;\r\n//            }\r\n//        }\r\n//        this.marginTop = 60 + $(\"#\" + id).height() * -1;\r\n//        this.marginTop = 15;\r\n//        if (this.dirTowardNorth()) {\r\n        //        }\r\n\r\n        // =========================================================================\r\n        // Response contains various elements that can be needed, include them all\r\n\r\n//        var styleString = \"border: 1px solid red !important\";\r\n        var imageElement = \"<img \" + idString + \" class='\" + imgClass + \"' src='\" + imagePath + \"' />\";\r\n        return {\"imageElement\": imageElement, \"imagePath\": imagePath};\r\n    };\r\n\r\n    // =========================================================================\r\n    // Low-level methods\r\n\r\n    this.createImageWrapper = function () {\r\n        var unitIdString = \"unit-wrapper-\" + this._id;\r\n\r\n        if (this._divSelector !== null) {\r\n            this._divSelector.html(\"<div class='engine-unit' id='\" + unitIdString + \"'></div>\");\r\n        } else {\r\n            $(\"#canvas\").append(\"<div class='engine-unit' id='\" + unitIdString + \"'></div>\");\r\n            this._divSelector = $(\"#canvas #\" + unitIdString);\r\n        }\r\n    };\r\n\r\n    this.handleOptions = function (options) {\r\n        if (options) {\r\n            if (typeof options.action !== 'undefined') {\r\n                this._action = options.action;\r\n            }\r\n            if (typeof options.sex !== 'undefined') {\r\n                this._sex = options.sex;\r\n            }\r\n            if (typeof options.dir !== 'undefined') {\r\n                this._dir = options.dir;\r\n            }\r\n            if (typeof options.type !== 'undefined') {\r\n                this._type = options.type;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    this.dirTowardEast = function () {\r\n        return [DIR_E, DIR_SE, DIR_NE].indexOf(this._dir) !== -1;\r\n    };\r\n\r\n    this.dirTowardWest = function () {\r\n        return [DIR_W, DIR_NW, DIR_SW].indexOf(this._dir) !== -1;\r\n    };\r\n\r\n    this.dirTowardNorth = function () {\r\n        return [DIR_NW, DIR_NE].indexOf(this._dir) !== -1;\r\n    };\r\n\r\n    this.dirTowardSouth = function () {\r\n        return [DIR_SW, DIR_SE].indexOf(this._dir) !== -1;\r\n    };\r\n\r\n//    this.isActionStatic = function () {\r\n//        return [ACTION_IDLE, SPEAR_IDLE].indexOf(this._dir) != -1;\r\n//        return false;\r\n    //    };\r\n\r\n    this.isStaticImage = function () {\r\n        return this._type !== null && stringStartsWith(this._type, \"nature_\");\r\n    };\r\n\r\n    this.isActionWalk = function () {\r\n        return this._action.charAt(1) === \"b\";\r\n    };\r\n\r\n    this.isActionWithWeapon = function (weaponName) {\r\n        if (weaponName === WEAPON_SPEAR) {\r\n            weaponLetter = \"g\";\r\n        } else {\r\n            weaponLetter = \"a\"; // Generic actions\r\n        }\r\n        return this._action.charAt(0) === weaponLetter.charAt(0);\r\n    };\r\n\r\n    // =========================================================================\r\n    // Getters and Setters\r\n\r\n    /**\r\n     * Getter or Setter for <b>dir</b> field.\r\n     * @param newDir one of DIR_* variables\r\n     */\r\n    this.dir = function (newDir) {\r\n        if (newDir !== undefined) {\r\n            this._dir = newDir;\r\n        } else {\r\n            return this._dir;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Getter or Setter for <b>action</b> field.\r\n     * @param newAction one of ACTION_* variables or others like that\r\n     */\r\n    this.action = function (newAction) {\r\n        if (newAction !== undefined) {\r\n            this._action = newAction;\r\n        } else {\r\n            return this._action;\r\n        }\r\n    };\r\n\r\n}\r\n\r\n// =========================================================================\r\n\r\n__firstFreeUnitId = 100;\r\n"]}