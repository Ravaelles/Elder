// =========================================================
// === GENERIC =============================================
// =========================================================

/**
 * Shows popup message with OK|Cancel buttons. Best to use before deleting objects, on Delete button.
 * @param {type} message
 * @returns {Boolean}
 */
function confirmDelete(message, disallowPleaseWaitOverlay) {
    if (!message) {
        message = "Are you sure you want to delete?";
    }

    if (confirm(message)) {
        if (!disallowPleaseWaitOverlay) {
            showPleaseWait();
        }
        return true;
    }
    else {
        return false;
    }
}

/**
 * Displays overlay with "Please wait" text. Based on bootstrap modal. Contains animated progress bar.
 */
function showPleaseWait() {
    var modalLoading = '<div class="modal" id="pleaseWaitDialog" data-backdrop="static" data-keyboard="false role="dialog">\
        <div class="modal-dialog">\
            <div class="modal-content">\
                <div class="modal-header">\
                    <h4 class="modal-title">Please wait...</h4>\
                </div>\
                <div class="modal-body">\
                    <div class="progress">\
                      <div class="progress-bar progress-bar-success progress-bar-striped active" role="progressbar"\
                      aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width:100%; height: 40px">\
                      </div>\
                    </div>\
                </div>\
            </div>\
        </div>\
    </div>';
    $(document.body).append(modalLoading);
    $("#pleaseWaitDialog").modal("show");
}

/**
 * Hides "Please wait" overlay. See function showPleaseWait().
 */
function hidePleaseWait() {
    $("#pleaseWaitDialog").modal("hide");
}

function scrollToElement(selector, miliseconds) {
    if (!miliseconds) {
        miliseconds = 1500;
    }
    $('html, body').animate({
        scrollTop: $(selector).offset().top
    }, miliseconds);
}

function appendErrorToBody(message) {
    $(document.body).append("<div style='background-color: #a22l color: white;'>" + message + "</div>");
}

function setCookie(cookieName, value, expireSecond) {
    var d = new Date();
    d.setTime(d.getTime() + (expireSecond * 1000));
    var expires = "expires=" + d.toGMTString();
    document.cookie = cookieName + "=" + value + "; " + expires;
}

function getCookie(cookieName) {
    var name = cookieName + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ')
            c = c.substring(1);
        if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
        }
    }
    return "";
}

function rand(min, max) {
    return Math.floor((Math.random() * max) + min);
}

function randArray(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}

function randElem(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}

function stringStartsWith(string, prefix) {
    return string.lastIndexOf(prefix, 0) === 0;
}

String.prototype.replaceAt = function (index, character) {
    return this.substr(0, index) + character + this.substr(index + character.length);
}

// =========================================================
// ===== SPECIFIC ==========================================
// =========================================================

function typeSounds() {
    $('input').keyup(function (e) {
        playTypeSound();
    });
    $("label").click(function () {
        playTypeSound();
    });
    $("button").click(function () {
        playTypeSound();
    });
    $(".create-account-button").click(function () {
        playTypeSound();
    });
}

function playTypeSound() {
    soundIndex = Math.floor((Math.random() * 5) + 1);
    $(document.body).append('<audio controls autoplay style="display: none" id="audio"><source src="/sound/terminal/type' + soundIndex + '.mp3" type="audio/mpeg"></audio>');
}

function log(text) {
    var object = console;
    object.log(text);
}


function getCanvasCoordinatesForTileX(tileX) {
    return MAP_CANVAS_OFFSET_LEFT + (tileX * TILE_SIZE);
}

function getCanvasCoordinatesForTileY(tileY) {
    return MAP_CANVAS_OFFSET_TOP + (tileY * TILE_SIZE);
}
window.initQueue.push(function () {
    var mapWidth = world['map-width'];
    var mapHeight = world['map-height'];
    var tiles = world['tiles'];
    var mapObjects = world['map-objects'];
    var html = "";

    // === Tiles ======================================================================

    for (row = 0; row < mapHeight; row++) {
        for (col = 0; col < mapWidth; col++) {
            html += createElement_tile(tiles[row][col], col, row);
        }
    }

    // === MapObjects ======================================================================

    for (var i in mapObjects) {
        var mapObject = mapObjects[i];
        html += createElement_mapObject(mapObject);
    }

    // =========================================================================
    // Add html to the map

    addHtmlToMapCanvas(html);
});

// =========================================================================
// =========================================================================
// =========================================================================

function addHtmlToMapCanvas(html) {
    var div = document.getElementById('map-canvas');
    div.innerHTML = div.innerHTML + html;
}
var mousePreviousPosition = null;
var mouseIsClicked = false;
var mouseHasMoved = false;

// =========================================================================

function initializeMapMove() {
    $("#map-canvas")
            .mousedown(function (event) {
                mapMouseDown(event);
            })
            .mouseup(function (event) {
                mapMouseUp(event);
            })
            .mousemove(function (event) {
                mapMouseMove(event);
            })
            .mousewheel(function (event) {
                mapScroll(event);
            })
            .mouseleave(function (event) {
                mapMouseLeave(event);
            })
}

// =========================================================================

function mapMouseDown(event) {
    worldmap = $(".worldmap");

    // Right click
    if (event.button === 2) {
//        console.log("Right click");
//        event.preventDefault();
//        event.stopPropagation()();
//        return true;
    }

    // Left or middle click
    else {
//        worldmapMessage("Maximum zoom reached!", "#f35");
    }

    mousePreviousPosition = event;
    mouseIsClicked = true;
    mouseHasMoved = false;
}

function mapMouseUp(event) {
    if (!mouseHasMoved) {
        mapClick(event);
    }

    mouseIsClicked = false;
    mousePreviousPosition = null;
    mouseHasMoved = false;
}

function mapMouseMove(event) {
    if (mouseIsClicked) {
        mouseHasMoved = true;
    }

    if (mouseIsClicked && mousePreviousPosition != null) {
        translationVector = moveWorldmapBackgroundImage(event);
        moveWorldmapObjects(translationVector);
    }

    mousePreviousPosition = event;

    // =========================================================================
    // Show coords
//    worldmapMessageForever(
//            "Mouse points to " + coordinatesToString(getMapCoordinatesFromScreenClick(event)), 'mouse-cords'
//            );
}

function mapMouseLeave(event) {
    if (mouseIsClicked) {
        mapMouseUp(event);
        mouseIsClicked = false;
    }
}

function mapClick(event) {
    var coordinates = getMapCoordinatesFromScreenClick(event);
    gameLog('<span>[' + coordinates['mapX'] + ',' + coordinates['mapY'] + ']</span> is unknown wasteland, '
            + 'not very hospitable place.');
}
function createElement_mapObject(mapObject) {
    var type = mapObject['type'];
    var canvasX = getCanvasCoordinatesForTileX(mapObject['x'] + mapObject['dx']);
    var canvasY = getCanvasCoordinatesForTileY(mapObject['y'] + mapObject['dy']);

    var html = '<img class="map-object map-object-' + type + '" style="top: '
            + canvasY + 'px; left: ' + canvasX + 'px" src="' + mapObject['image'] + '">'

    return html;
}


function createElement_tile(tile, x, y) {
    var canvasX = getCanvasCoordinatesForTileX(x);
    var canvasY = getCanvasCoordinatesForTileY(y);

    var html = '<img class="map-tile" data-x="' + x + '" data-y="' + y + '" style="top: '
            + canvasY + 'px; left: ' + canvasX + 'px" src="' + tile['image'] + '">';

    return html;
}


var TILE_SIZE = 80;
var MAP_CANVAS_OFFSET_TOP = 50;
var MAP_CANVAS_OFFSET_LEFT = 50;
window.initQueue.push(function () {
    $("#map-canvas").mousewheel(function (event) {
        _mapScroll(event);
    });
});

// =========================================================================

function changeZoom(event, isZoomIn) {

}

// =========================================================================

function _mapScroll(event) {
    var scrollType = event.deltaY; // 1 for wheel up, -1 for wheel down

    // Wheel up
    if (scrollType >= 1) {
        changeZoom(event, false);
    }

    // Wheel down
    else if (scrollType <= -1) {
        changeZoom(event, true);
    }

    // Force mouse move event as scroll will change cursor relative position on the map
//    mapMouseMove(event);
}
//# sourceMappingURL=game.min.js.map
