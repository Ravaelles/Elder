function log(text) {
    var object = console;
    object.log(text);
}


// =========================================================================
// Coordinates for tile

function getCanvasXForTile(tileX) {
    return (tileX * getTileSize());
}

function getCanvasYForTile(tileY) {
    return (tileY * getTileSize());
}

// =========================================================================
// Coordinates for map objects

//function getCanvasXForMapObject(mapObject) {
//    return ((mapObject['TX'] + 0.5 + mapObject['dTX']) * getTileSize()) - getTileSize() / 2;
////    return ((mapObject['TX'] + 0.5 + mapObject['dTX']) * getTileSize()) - mapObject['width'] / 2;
//}
//
//function getCanvasYForMapObject(mapObject) {
//    return ((mapObject['TY'] + 0.5 + mapObject['dTY']) * getTileSize()) - mapObject['height'] / 2;
////    return ((mapObject['TY'] + 0.5 + mapObject['dTY']) * getTileSize());
//}
window.initQueue.push(function () {
    var mapWidth = world['map-width'];
    var mapHeight = world['map-height'];
    var tiles = world['tiles'];
    var rawMapObjects = world['map-objects'];
    var html = "";

    // === Tiles ======================================================================

    for (row = 0; row < mapHeight; row++) {
        for (col = 0; col < mapWidth; col++) {
            html += createElement_tile(tiles[row][col], col, row);
        }
    }

    // === MapObjects ======================================================================

    for (var i in rawMapObjects) {
        var rawMapObject = rawMapObjects[i];
        var mapObject = new MapObject(rawMapObject);
        html += mapObject.createElement();
    }

    html += '<img src="/img/world/people/person-right.gif" class="person" style="position:absolute; ' +
            'width:30px; height:60px; z-index:9999; top:200px; left:400px;" />';

    // =========================================================================
    // Add html to the map

    addHtmlToMapCanvas(html);

    $(".person").animate({
        left: "1940px"
    }, 26000, "linear");
});

// =========================================================================
// =========================================================================
// =========================================================================

function addHtmlToMapCanvas(html) {
    var div = document.getElementById('map-canvas');
    div.innerHTML = div.innerHTML + html;
}
var mousePreviousPosition = null;
var mouseIsClicked = false;
var mouseHasMoved = false;

// =========================================================================

function initializeMapMove() {
    $("#map-canvas")
            .mousedown(function (event) {
                mapMouseDown(event);
            })
            .mouseup(function (event) {
                mapMouseUp(event);
            })
            .mousemove(function (event) {
                mapMouseMove(event);
            })
            .mousewheel(function (event) {
                mapScroll(event);
            })
            .mouseleave(function (event) {
                mapMouseLeave(event);
            })
}

// =========================================================================

function mapMouseDown(event) {
    worldmap = $(".worldmap");

    // Right click
    if (event.button === 2) {
//        console.log("Right click");
//        event.preventDefault();
//        event.stopPropagation()();
//        return true;
    }

    // Left or middle click
    else {
//        worldmapMessage("Maximum zoom reached!", "#f35");
    }

    mousePreviousPosition = event;
    mouseIsClicked = true;
    mouseHasMoved = false;
}

function mapMouseUp(event) {
    if (!mouseHasMoved) {
        mapClick(event);
    }

    mouseIsClicked = false;
    mousePreviousPosition = null;
    mouseHasMoved = false;
}

function mapMouseMove(event) {
    if (mouseIsClicked) {
        mouseHasMoved = true;
    }

    if (mouseIsClicked && mousePreviousPosition != null) {
        translationVector = moveWorldmapBackgroundImage(event);
        moveWorldmapObjects(translationVector);
    }

    mousePreviousPosition = event;

    // =========================================================================
    // Show coords
//    worldmapMessageForever(
//            "Mouse points to " + coordinatesToString(getMapCoordinatesFromScreenClick(event)), 'mouse-cords'
//            );
}

function mapMouseLeave(event) {
    if (mouseIsClicked) {
        mapMouseUp(event);
        mouseIsClicked = false;
    }
}

function mapClick(event) {
    var coordinates = getMapCoordinatesFromScreenClick(event);
    gameLog('<span>[' + coordinates['mapX'] + ',' + coordinates['mapY'] + ']</span> is unknown wasteland, '
            + 'not very hospitable place.');
}
function MapObject(mapObject) {

    this.rawMapObject = null; // Array object passed from PHP

    this._width = null;
    this._height = null;
    this._sizeModifier = 1;

    // =========================================================================

    this.constructor = function (mapObject) {
        this.rawMapObject = mapObject;
    };

    // =========================================================================
    // Getters

    /*
     * Returns width of image representing this map object according to the current zoom.
     */
    this.getWidth = function () {
        if (this._width === null) {
            this.defineWidthAndHeight();
        }
        return this._width;
    };

    /*
     * Returns height of image representing this map object according to the current zoom.
     */
    this.getHeight = function () {
        if (this._height === null) {
            this.defineWidthAndHeight();
        }
        return this._height;
    };

    this.defineWidthAndHeight = function () {
        var scaleRatio = getTileSize() / this.getRawWidth();
        this._sizeModifier = this.getSizeModifier();
        this._width = this.getRawWidth() * scaleRatio * this._sizeModifier;
        this._height = this.getRawHeight() * scaleRatio * this._sizeModifier;
    };

    this.getCanvasX = function () {
        return ((this.rawMapObject['TX'] + 0.5 + this.rawMapObject['dTX']) * getTileSize())
                - getTileSize() / 2;
        //    return ((mapObject['TX'] + 0.5 + mapObject['dTX']) * getTileSize()) - mapObject['width'] / 2;
    };

    this.getCanvasY = function () {
        var centerInTileModifier = (this.isVerticalAlignofImageToTheBottom() ?
                (-this.getHeight()) : (-this.getHeight() / 2));
        return ((this.rawMapObject['TY'] + 0.5 + this.rawMapObject['dTY']) * getTileSize())
                + centerInTileModifier;
        //    return ((mapObject['TY'] + 0.5 + mapObject['dTY']) * getTileSize());
    };

    // =========================================================================
    // Create element

    this.createElement = function () {
        var rawMapObject = this.rawMapObject;

        var type = rawMapObject['type'];
        var canvasX = this.getCanvasX();
        var canvasY = this.getCanvasY();
        var zIndex = this.calculateZIndex();
        var width = getTileSize() * this.getSizeModifier();

        var style = 'z-index:' + zIndex + '; top:' + canvasY + 'px; left:' + canvasX + 'px; '
                + 'width:' + width + 'px';

        var html = '<img class="map-object map-object-' + type + '" style="' + style
                + '" src="' + rawMapObject['image'] + '">'

        return html;
    };

    this.calculateZIndex = function () {
        var zIndex = (this.rawMapObject['TY'] + this.rawMapObject['dTY'] + 2) * 10;
        if (this.getRawType() === 'tree') {
            zIndex += 1000;
        }
        return zIndex;
    };

    this.getSizeModifier = function () {
        var size = this.getRawType() === 'tree' ? 0.5 : 1;
        return size;
    };

    // =========================================================================
    // Raw MapObject getters

    this.getRawType = function () {
        return this.rawMapObject.type;
    };

    this.getRawWidth = function () {
        return this.rawMapObject['width'];
    };

    this.getRawHeight = function () {
        return this.rawMapObject['height'];
    };

    this.isVerticalAlignofImageToTheBottom = function () {
        return this.rawMapObject['vertical-align'] === 'bottom';
    };

    // =========================================================================

    this.constructor(mapObject);

}
function createElement_tile(tile, x, y) {
    var canvasX = getCanvasXForTile(x);
    var canvasY = getCanvasYForTile(y);

    var style = 'top: ' + canvasY + 'px; left: ' + canvasX + 'px;';

    var html = '<img class="map-tile" data-x="' + x + '" data-y="' + y + '" style="' + style
            + '" src="' + tile['image'] + '"' + ' width=' + getTileSize() + ' height=' + getTileSize() + '>';

    return html;
}


var TILE_SIZE = 128;
//var MAP_CANVAS_OFFSET_TOP = 0;
//var MAP_CANVAS_OFFSET_LEFT = 0;

function getTileSize() {
    return TILE_SIZE;
}
window.initQueue.push(function () {
    $("#map-canvas").mousewheel(function (event) {
        _mapScroll(event);
    });
});

// =========================================================================

function changeZoom(event, isZoomIn) {

}

// =========================================================================

function _mapScroll(event) {
    var scrollType = event.deltaY; // 1 for wheel up, -1 for wheel down

    // Wheel up
    if (scrollType >= 1) {
        changeZoom(event, false);
    }

    // Wheel down
    else if (scrollType <= -1) {
        changeZoom(event, true);
    }

    // Force mouse move event as scroll will change cursor relative position on the map
//    mapMouseMove(event);
}
//# sourceMappingURL=rmap-engine.min.js.map
