function isDefined(param) {
    return typeof param != 'undefined';
}

function isUndefined(param) {
    return typeof param == 'undefined';
}

function cloneObject(object) {
    return JSON.parse(JSON.stringify(object));
}
function getMapCoordinatesFromScreenClick(event) {

    // Define click on map canvas manually, because if clicked on a child, it changes .offsetX value.
    var canvasX = event.pageX - WORLDMAP_CANVAS_MARGIN_LEFT;
    var canvasY = event.pageY - WORLDMAP_CANVAS_MARGIN_TOP;

    return getMapCoordinatesFromCanvasCoordinates(canvasX, canvasY);
}

function getMapCoordinatesFromCanvasCoordinates(canvasX, canvasY) {

    // X-related
    var coordinatesOffsetX = getMapOffsetPixelsX() * getWorldmapZoom();
    var mapScreenWidth = WORLDMAP_CANVAS_WIDTH * getWorldmapZoom();
    var mapScreenWidthPercent = canvasX / WORLDMAP_CANVAS_WIDTH;

    // Y-related
    var coordinatesOffsetY = getMapOffsetPixelsY() * getWorldmapZoom();
    var mapScreenHeight = WORLDMAP_CANVAS_HEIGHT * getWorldmapZoom();
    var mapScreenHeightPercent = canvasY / WORLDMAP_CANVAS_HEIGHT;

    // Return object
    var mapX = parseInt(coordinatesOffsetX + mapScreenWidthPercent * mapScreenWidth);
    var mapY = parseInt(coordinatesOffsetY + mapScreenHeightPercent * mapScreenHeight);
    return {'mapX': mapX, 'mapY': mapY};
}

function getCanvasCoordinatesFromMapCoordinates(mapX, mapY) {
    return {
        'canvasX': WORLDMAP_CANVAS_MARGIN_LEFT + mapX / getWorldmapZoom() - getMapOffsetPixelsX() + 2,
        'canvasY': WORLDMAP_CANVAS_MARGIN_TOP + mapY / getWorldmapZoom() - getMapOffsetPixelsY() + 1
    };
}

// =========================================================================

function getCurrentTopLeftPointMapCoordinates() {
    return getMapCoordinatesFromCanvasCoordinates(0, 0);
}

// =========================================================================

function coordinatesToString(coordinates) {
    if ('canvasX' in coordinates) {
        return "[" + coordinates['canvasX'] + "," + coordinates['canvasY'] + "]";
    } else {
        return "[" + coordinates['mapX'] + "," + coordinates['mapY'] + "]";
    }
}
function HtmlElement(left, top) {

    this._id = null; // Unique identifier
    this._selector = null; // jQuery selector of this html element
    this._top = null; // CSS "top" value in pixels
    this._left = null; // CSS "left" value in pixels
    this._htmlDOM = null; // DOM element that was used to create this html element
    this._styleString = null; // All styles for this element except "top" and "left"
    this._htmlString = null; // Ready html string

    // =========================================================================
    // Constructor

    this.constructor = function (left, top) {
        this._id = __firstFreeWorldmapElementId++;
        this._htmlDOM = document.createElement("div");
        this._left = left;
        this._top = top;

//        for (var fieldName in options) {
//            var value = options[fieldName];
//            fieldName = "_" + fieldName;
//            this.fieldName = value;
//        }
    };
    this.constructor(left, top);

    // =========================================================================

    this.getId = function () {
        return this._id;
    };

    this.getSelector = function () {
        if (this._selector === null) {
            this._selector = $("#html-element-" + this._id)
        }
        return this._selector;
    };

    // === Style ======================================================================

    this.setStyle = function (styleString) {
        this._styleString = styleString;
        this._htmlDOM.setAttribute('id', 'html-element-' + this._id);
        this._htmlDOM.setAttribute('style', styleString);
    };

    // === HTML elements ======================================================================

    this.getHtml = function () {
        if (this._htmlString === null) {
            this.prepareHtml();
        }
        return this._htmlString;
    };

    this.prepareHtml = function () {
        this.updateHtmlDOMPosition();
        this._htmlString = this._htmlDOM.outerHTML;
    };

    this.updateHtmlDOMPosition = function () {
        var style = this._styleString;
        style += "top:" + this._top + "px;";
        style += "left:" + this._left + "px;";
        this._htmlDOM.setAttribute('style', style);
    };

    // === Position ======================================================================

    this.translate = function (dx, dy) {
        this._left += dx;
        this._top += dy;

        this.getSelector().css({
            'left': this._left + 'px',
            'top': this._top + 'px'
        });
    };

//    this.setTop = function (top) {
//        this._top = top;
//    };

//    this.getTop = function () {
//        return this._top;
//    };

//    this.setLeft = function (left) {
//        this._left = left;
//    };

//    this.getLeft = function () {
//        return this._left;
//    };

}

// =========================================================================

__firstFreeWorldmapElementId = 1;


var FORBID_RIGHT_CLICK = false;

// =========================================================================

var mouseIsClicked = false;
var mousePreviousPosition = null;
var mouseHasMoved = false;

// === Map events ======================================================================

function initializeWorldmapEvents() {
    $(".worldmap-location")
            .mousedown(function (event) {
                mapMouseDown(event);
                event.stopPropagation();
            })
            .mouseup(function (event) {
                mapMouseUp(event);
                event.stopPropagation();
            })
            .mousemove(function (event) {
                mapMouseMove(event);
                event.stopPropagation();
            });

    $(".worldmap")
            .mousedown(function (event) {
                mapMouseDown(event);
            })
            .mouseup(function (event) {
                mapMouseUp(event);
            })
            .mousemove(function (event) {
                mapMouseMove(event);
            })
            .mousewheel(function (event) {
                mapScroll(event);
            })
            .mouseleave(function (event) {
                mapMouseLeave(event);
            })
            .contextmenu(function (event) {
                if (FORBID_RIGHT_CLICK) {
                    event.preventDefault(); // Stop the context menu
                }
            });
}

// =========================================================================

function mapMouseDown(event) {
    worldmap = $(".worldmap");

    // Right click
    if (event.button === 2) {
//        console.log("Right click");
//        event.preventDefault();
//        event.stopPropagation()();
//        return true;
    }

    // Left or middle click
    else {
//        worldmapMessage("Maximum zoom reached!", "#f35");
    }

    mousePreviousPosition = event;
    mouseIsClicked = true;
    mouseHasMoved = false;
}

function mapMouseUp(event) {
    if (!mouseHasMoved) {
        mapClick(event);
    }

    mouseIsClicked = false;
    mousePreviousPosition = null;
    mouseHasMoved = false;
}

function mapMouseMove(event) {
    if (mouseIsClicked) {
        mouseHasMoved = true;
    }

    if (mouseIsClicked && mousePreviousPosition != null) {
        translationVector = moveWorldmapBackgroundImage(event);
        moveWorldmapObjects(translationVector);
    }

    mousePreviousPosition = event;

    // =========================================================================
    // Show coords
    worldmapMessageForever(
            "Mouse points to " + coordinatesToString(getMapCoordinatesFromScreenClick(event)), 'mouse-cords'
            );
}

function mapScroll(event) {
    var scrollType = event.deltaY; // 1 for wheel up, -1 for wheel down

    // Wheel up
    if (scrollType >= 1) {
        changeZoom(event, false);
    }

    // Wheel down
    else if (scrollType <= -1) {
        changeZoom(event, true);
    }

    // Force mouse move event as scroll will change cursor relative position on the map
    mapMouseMove(event);
}

function mapMouseLeave(event) {
    if (mouseIsClicked) {
        mapMouseUp(event);
        mouseIsClicked = false;
    }
}

function mapClick(event) {
    var coordinates = getMapCoordinatesFromScreenClick(event);
    gameLog('<span>[' + coordinates['mapX'] + ',' + coordinates['mapY'] + ']</span> is unknown wasteland, '
            + 'not very hospitable place.');
}
var WORLDMAP_LOCATION_SIZE = null;
var WORLDMAP_LOCATION_LABEL_MARGIN_LEFT = null;
var WORLDMAP_LOCATION_LABEL_MARGIN_TOP = null;

var _WORLDMAP_LOCATION_SIZE_MODIFIER = 35;
var _WORLDMAP_LOCATION_LABEL_WIDTH = 100;

// =========================================================================

function initializeWorldmapLocations() {
    recalculateWorldmapLocationVariables();

    worldmapLocations.forEach(function (location, index) {
        getWorldmap().append(createHtmlFromLocationJson(location, index));
    });
}

// =========================================================================

function createHtmlFromLocationJson(location, index) {
    var id = location['_id'];
//    var text = location['location']['x'] + "," + location['location']['y'];
    var text = location['name'];
    var labelWidth = WORLDMAP_LOCATION_SIZE;

    var canvasCoordinates = getCanvasCoordinatesFromMapCoordinates(
//            location['location']['x'] - size / 2, location['location']['y'] - size / 2
            location['location']['x'], location['location']['y']
            );

    var locationStyle = 'top:' + (canvasCoordinates['canvasY'] - WORLDMAP_LOCATION_SIZE / 2) + 'px;left:'
            + (canvasCoordinates['canvasX'] - WORLDMAP_LOCATION_SIZE / 2) + 'px;'
            + 'width:' + WORLDMAP_LOCATION_SIZE + 'px;height:' + WORLDMAP_LOCATION_SIZE + 'px';

    var labelStyle = 'margin-top:' + WORLDMAP_LOCATION_LABEL_MARGIN_TOP
            + 'px;margin-left:' + WORLDMAP_LOCATION_LABEL_MARGIN_LEFT + 'px';

    return '<div class="worldmap-location" id="worldmap-location-' + id + '" '
            + 'variableName="worldmapLocations" variableIndex="' + index + '" style="' + locationStyle + '">'
            + '<label style="' + labelStyle + '">' + text + '</label>'
            + '</div>';
}

function recalculateWorldmapLocationVariables() {
    WORLDMAP_LOCATION_SIZE = _WORLDMAP_LOCATION_SIZE_MODIFIER / getWorldmapZoom();
    WORLDMAP_LOCATION_BORDER_WIDTH = 1.5;
    WORLDMAP_LOCATION_LABEL_MARGIN_TOP = _WORLDMAP_LOCATION_SIZE_MODIFIER / getWorldmapZoom() * 1.02;
    WORLDMAP_LOCATION_LABEL_MARGIN_LEFT = -_WORLDMAP_LOCATION_LABEL_WIDTH / 2 + WORLDMAP_LOCATION_SIZE / 2
            - WORLDMAP_LOCATION_BORDER_WIDTH + 1;
}
var _WORLDMAP_MESSAGE_SHOW_TIME = 2000;
var _WORLDMAP_MESSAGE_DIM_INTERVAL = 100;

var _worldmapMessageFirstFreeId = 10000;

// =========================================================================

function gameLog(message) {
    $(".game-log p").css('opacity', '0.7');

    $(".game-log").prepend("<p style='display: none' class='game-log-invisible'><span class='dot'>•</span> "
            + message + "</p>");

    $(".game-log .game-log-invisible").slideDown(700);
}

function worldmapMessageForever(text, uniqueForeverMessageId, color) {
    if (typeof uniqueForeverMessageId == 'undefined') {
        console.error("Did not pass worldmapMessageForever unique id!");
        return;
    }
    return worldmapMessage(text, color, uniqueForeverMessageId);
}

function worldmapMessage(text, color, uniqueForeverMessageId) {
    if (color) {
        color = "color: " + color;
    }

    // Define message id
    var messageId = 'game-message-' + (isDefined(uniqueForeverMessageId) ?
            uniqueForeverMessageId : _worldmapMessageFirstFreeId++);

    // =========================================================================
    // Remove previous message if needed

    if (uniqueForeverMessageId) {
        var message = $("#" + messageId);
        if (message.length > 0) {
            message.text(text);
            return;
        }
    }

    // =========================================================================
    // Add html element of message
    $(".game-messages").append("<div class='game-message' id='" + messageId + "' style='width: "
            + WORLDMAP_CANVAS_WIDTH + "px;" + color + ";opacity:1.0'>" + text + "</div>");

    // =========================================================================
    // Decrease message's opacity with time
    if (!uniqueForeverMessageId) {
        setTimeout(function () {
            _dimMessageWithTime(messageId);
        }, _WORLDMAP_MESSAGE_SHOW_TIME);
    }
}

// =========================================================================

function _dimMessageWithTime(messageId) {
    var message = $("#" + messageId);
    var opacity = message.css('opacity');
    if (opacity <= 0) {
        var hideTime = 400;
        message.hide(hideTime);
        setTimeout(function () {
            message.remove();
        }, hideTime);
    } else {
        message.css('opacity', message.css('opacity') - 0.03);
        setTimeout(function () {
            _dimMessageWithTime(messageId);
        }, _WORLDMAP_MESSAGE_DIM_INTERVAL + opacity * 100);
    }
}
var MOUSE_DRAG_MODIFIER = 1;

// === Move map / objects ==============================================================

function moveWorldmapBackgroundImage(eventOrX, yOrNull) {
    if (isUndefined(yOrNull)) {
        var dx = eventOrX.pageX - mousePreviousPosition.pageX;
        var dy = eventOrX.pageY - mousePreviousPosition.pageY;
    } else {
        var dx = eventOrX;
        var dy = yOrNull;
    }

    // =========================================================================
    // Get current image position
    var imagePosX = -1 * getMapOffsetPixelsX();
    var imagePosY = -1 * getMapOffsetPixelsY();

    // Modify variable image position
    deltaImagePosX = dx;
    deltaImagePosY = dy;
    imagePosX += deltaImagePosX;
    imagePosY += deltaImagePosY;
    imagePosXWithScreenWidth = imagePosX - WORLDMAP_CANVAS_WIDTH;
    imagePosYWithScreenHeight = imagePosY - WORLDMAP_CANVAS_HEIGHT;

    // Force image to be horizontally in bounds
    if (imagePosX > 0) {
        var oldImagePosX = imagePosX;
        imagePosX = 0;
        deltaImagePosX -= (oldImagePosX - imagePosX);
    } else if (imagePosXWithScreenWidth <= -WORLDMAP_WIDTH / getWorldmapZoom()) {
        var oldImagePosX = imagePosX;
        imagePosX = -WORLDMAP_WIDTH / getWorldmapZoom() + WORLDMAP_CANVAS_WIDTH;
        deltaImagePosX -= (oldImagePosX - imagePosX);
    }

    // Force image to be vertically in bounds
    if (imagePosY > 0) {
        var oldImagePosY = imagePosY;
        imagePosY = 0;
        deltaImagePosY -= (oldImagePosY - imagePosY);
    } else if (imagePosYWithScreenHeight <= -WORLDMAP_HEIGHT / getWorldmapZoom()) {
        var oldImagePosY = imagePosY;
        imagePosY = -WORLDMAP_HEIGHT / getWorldmapZoom() + WORLDMAP_CANVAS_HEIGHT;
        deltaImagePosY -= (oldImagePosY - imagePosY);
    }

    // Remember current view position
    updateViewRectangle(-1 * imagePosX, -1 * imagePosY);

    // =========================================================================

    return {dx: deltaImagePosX, dy: deltaImagePosY};
}

function moveWorldmapObjects(translationVector) {
    var allWorldmapObjects = getAllWorldmapObjects();
//    console.log("==== WORLDMAP OBJECTS =====");
    for (var key in allWorldmapObjects) {
        var worldmapObject = allWorldmapObjects[key];
//        console.log(worldmapObject);
    }

    // =========================================================================
    // Locations

    var mapLocations = $(".worldmap-location");
    $.each(mapLocations, function (index, object) {
        var mapObject = $("#" + object['id']);
        mapObject.css({
            'top': parseFloat(mapObject.css('top')) + translationVector['dy'],
            'left': parseFloat(mapObject.css('left')) + translationVector['dx']
        });
    });

    // =========================================================================
    // Worldmap objects

    $.each(_allWorldmapObjects, function (index, worldmapObject) {
        worldmapObject.translate(translationVector['dx'], translationVector['dy']);
    });
}
function WorldmapObject(options) {

    this._id = null; // Unique identifier for the worldmap object
    this._x = null; //
    this._y = null; //
    this._x2 = null; //
    this._y2 = null; //
    this._htmlElements = []; //

    // =========================================================================
    // Constructor

    this.constructor = function (options) {
        this._id = __firstFreeWorldmapObjectId++;

        for (var fieldName in options) {
            var value = options[fieldName];
            fieldName = "_" + fieldName;
            this.fieldName = value;
        }
    };
    this.constructor(options);

    this.getId = function () {
        return this._id;
    };

    // === HTML elements ======================================================================

    this.addHtmlElement = function (htmlElement) {
        var htmlElementId = htmlElement.getId();
        this._htmlElements[htmlElementId] = htmlElement;
        return this;
    };

    this.getHtmlElements = function () {
        return this._htmlElements.slice();
    };

    // === Coordinates ======================================================================

    this.setCoordinates = function (x, y) {
        this._x = x;
        this._y = y;
        return this;
    };

    this.setEndCoordinates = function (x2, y2) {
        this._x2 = x2;
        this._y2 = y2;
        return this;
    };

    this.getCoordinates = function () {
        return {'x': this._x, 'y': this._y};
    };

    this.translate = function (dx, dy) {
        this._x += dx;
        this._y += dy;

        for (var htmlElementId in this._htmlElements) {
            var htmlElementObject = this._htmlElements[htmlElementId];
            htmlElementObject.translate(dx, dy);
        }
    };

}

// =========================================================================

__firstFreeWorldmapObjectId = 1;
var _allWorldmapObjects = {};

// =========================================================================

function getAllWorldmapObjects() {
    return _allWorldmapObjects;
}

function addWorldmapObject(worldmapObject) {

    // For every html element, add it to the worldmap canvas
    var htmlElements = worldmapObject.getHtmlElements();
    for (var index in htmlElements) {
        var htmlElement = htmlElements[index];
        getWorldmap().append(htmlElement.getHtml());
    }

    // Add object to the list
    _allWorldmapObjects[worldmapObject.getId()] = worldmapObject;
}


WENGINE_DEFAULT_LINE_WIDTH = 1;

// =========================================================================

window.initQueue.push(function () {
    setTimeout(function () {
        var rect = getWorldmapViewRectangle();
        var TEMP = 30;

        rect['x'] += TEMP;
        rect['y'] += TEMP;
        rect['width'] -= 2 * TEMP + WENGINE_DEFAULT_LINE_WIDTH;
        rect['height'] -= 2 * TEMP + WENGINE_DEFAULT_LINE_WIDTH;
        rect['width'] /= getWorldmapZoom();
        rect['height'] /= getWorldmapZoom();

//        WEngine_paintRectangleFromArray(rect, {'background-color': 'transparent'});
        paintTest();
    }, 160);
});

// =========================================================================

var testLineX1;
var testLineY1;
var testLineX2;
var testLineY2;
function paintTest() {
    testLineX1 = _WORLDMAP_IMAGE_INITIAL_X + 300;
    testLineY1 = _WORLDMAP_IMAGE_INITIAL_Y + 400;
    testLineX2 = testLineX1;
    testLineY2 = testLineY1;

    var line = WEngine_paintLine(testLineX1, testLineY1, testLineX2, testLineY2);
    console.log(line);

    setTimeout(function () {
        testLineX2
    }, 100);
}

// === Public ======================================================================

function WEngine_paintLine(x1, y1, x2, y2, options, worldmapObject) {
    //    console.log("Line: " + x1 + "," + y1 + " / " + x2 + "," + y2);
    canvasCoords = getCanvasCoordinatesFromMapCoordinates(x1, y1);
    x1 = canvasCoords['canvasX'];
    y1 = canvasCoords['canvasY'];
    canvasCoords = getCanvasCoordinatesFromMapCoordinates(x2, y2);
    x2 = canvasCoords['canvasX'];
    y2 = canvasCoords['canvasY'];

    var line = _WEngine_getLine(x1, y1, x2, y2, options);

    // =========================================================================
    // Worldmap object related - automatically create only if no worldmapObject was passed
    if (isUndefined(worldmapObject)) {
        worldmapObject = new WorldmapObject();
        worldmapObject.setCoordinates(x1, y1);
        worldmapObject.setEndCoordinates(x2, y2);
        worldmapObject.addHtmlElement(line);
        addWorldmapObject(worldmapObject);

        // Return WORLDMAP OBJECT
        return worldmapObject;
    }

    // If passed existing WorldmapObject return HTML ELEMENT
    else {
        return line;
    }
}

function WEngine_paintRectangleFromArray(array, options) {
    return WEngine_paintRectangle(
            array['x'], array['y'], array['x'] + array['width'], array['y'] + array['height'], options
            );
}

function WEngine_paintRectangle(x1, y1, x2, y2, options) {
    var worldmapObject = new WorldmapObject();
    worldmapObject.setCoordinates(x1, y1);
    worldmapObject.setEndCoordinates(x2, y2);

    worldmapObject.addHtmlElement(WEngine_paintLine(x1, y1, x2, y1, options, worldmapObject)); // Horiz Top
    worldmapObject.addHtmlElement(WEngine_paintLine(x1, y2, x2, y2, options, worldmapObject)); // Horiz Bottom
    worldmapObject.addHtmlElement(WEngine_paintLine(x1, y1, x1, y2, options, worldmapObject)); // Vert Left
    worldmapObject.addHtmlElement(WEngine_paintLine(x2, y1, x2, y2, options, worldmapObject)); // Vert Right

    addWorldmapObject(worldmapObject);
    return worldmapObject;
}

// === Private ======================================================================

function _WEngine_getLine(x1, y1, x2, y2, options) {
    var a = x1 - x2,
            b = y1 - y2,
            c = Math.sqrt(a * a + b * b);

    var sx = (x1 + x2) / 2,
            sy = (y1 + y2) / 2;

    var x = sx - c / 2,
            y = sy;

    var alpha = Math.PI - Math.atan2(-b, a);

    return _WEngine_getLine_element(x, y, c, alpha, options);
}

// === Html elements ======================================================================

//function _WEngine_getLine_element(x, y, length, angle, options) {
//    var line = document.createElement("div");
//    var styles = 'border: ' + WENGINE_DEFAULT_LINE_WIDTH + 'px dashed red; '
//            + 'width: ' + length + 'px; '
//            + 'height: 0px; '
//            + '-moz-transform: rotate(' + angle + 'rad); '
//            + '-webkit-transform: rotate(' + angle + 'rad); '
//            + '-o-transform: rotate(' + angle + 'rad); '
//            + '-ms-transform: rotate(' + angle + 'rad); '
//            + 'position: absolute; '
//            + 'top: ' + y + 'px; '
//            + 'left: ' + x + 'px; ';
//
//    if (isDefined(options)) {
//        for (var option in options) {
//            styles += option + ':' + options[option] + ';';
//        }
//    }
//
//    line.setAttribute('style', styles);
//    _WEngine_assignIdToHtmlElement(line);
//    return line;
//}
function _WEngine_getLine_element(x, y, length, angle, options) {
    var lineHtmlElement = new HtmlElement(x, y);
    var style = 'border: ' + WENGINE_DEFAULT_LINE_WIDTH + 'px dashed red; '
            + 'width: ' + length + 'px; '
            + 'height: 0px; '
            + '-moz-transform: rotate(' + angle + 'rad); '
            + '-webkit-transform: rotate(' + angle + 'rad); '
            + '-o-transform: rotate(' + angle + 'rad); '
            + '-ms-transform: rotate(' + angle + 'rad); '
            + 'position: absolute; ';
//            + 'top: ' + y + 'px; '
//            + 'left: ' + x + 'px; ';;

    if (isDefined(options)) {
        for (var option in options) {
            style += option + ':' + options[option] + ';';
        }
    }

    lineHtmlElement.setStyle(style);
    return lineHtmlElement;
}

// =========================================================================

//function _WEngine_assignIdToHtmlElement(element) {
//    __lastHtmlElementId = (__firstFreeWorldmapObjectHtmlElementId++);
//    element.setAttribute('id', 'html-element-' + __lastHtmlElementId);
//    return __lastHtmlElementId;
//}

__firstFreeWorldmapObjectHtmlElementId = 100;
//__lastHtmlElementId = null;

// Initial view settings
var _WORLDMAP_IMAGE_INITIAL_WIDTH = 3500;
var _WORLDMAP_IMAGE_INITIAL_X = 1000;
var _WORLDMAP_IMAGE_INITIAL_Y = 1000;

// View rectangle
var _worldmapViewRectangle = null;
var _currentWorldmapImageWidth = null;
var _currentWorldmapImageHeight = null;

// === Set up view & zoom ===================================================

function initializeWorldmapView() {

    // Define rectangle view width and height
    _currentWorldmapImageWidth = _WORLDMAP_IMAGE_INITIAL_WIDTH;
    _currentWorldmapImageHeight = _currentWorldmapImageWidth * WORLDMAP_CANVAS_WIDTH / WORLDMAP_CANVAS_HEIGHT;

    // Definte rectangle view
    _worldmapViewRectangle = {
        'x': _WORLDMAP_IMAGE_INITIAL_X,
        'y': _WORLDMAP_IMAGE_INITIAL_Y,
        'width': WORLDMAP_CANVAS_WIDTH,
        'height': WORLDMAP_CANVAS_HEIGHT
    };

    // Init zoom
    initializeWorldmapZoom();

    // Assign proper values for background image
    updateViewRectangle(_worldmapViewRectangle['x'], _worldmapViewRectangle['y']);
}

// === Public ======================================================================

function getWorldmapViewRectangle() {
    return cloneObject(_worldmapViewRectangle);
}

function getWorldmapViewRectangleWidth() {
    return _worldmapViewRectangle['width'];
}

function getWorldmapViewRectangleHeight() {
    return _worldmapViewRectangle['height'];
}

function getMapOffsetPixelsX() {
    return _worldmapViewRectangle['x'];
}

function getMapOffsetPixelsY() {
    return _worldmapViewRectangle['y'];
}

function updateViewRectangle(xOrObject, yOrObject) {

    // If params are defined, it means we need to move by view rectangle [x,y]
    if (isDefined(xOrObject)) {
        var newX, newY;
        if (xOrObject != null) {
            newX = Math.abs(xOrObject);
            newY = Math.abs(yOrObject);
        } else {
            newX = Math.abs(xOrObject['x']);
            newY = Math.abs(yOrObject['y']);
        }

        _worldmapViewRectangle['x'] = newX;
        _worldmapViewRectangle['y'] = newY;

        // Update background image position
        getWorldmap().css({
            'background-position': -newX + "px " + -newY + "px"
        });
    }

    // Update width and height of view rectangle
    _worldmapViewRectangle['width'] = WORLDMAP_CANVAS_WIDTH / getWorldmapZoom();
    _worldmapViewRectangle['height'] = WORLDMAP_CANVAS_HEIGHT / getWorldmapZoom();

    // Update background image size
    getWorldmap().css({
        'background-size': _currentWorldmapImageWidth + "px auto"
    });

    // =========================================================================
    // Return difference in view rectangle field values

//    console.log('');
//    console.log("NEW:");
//    console.log(_worldmapViewRectangle);
//    console.log("OLD");
//    console.log(_oldWorldmapViewRectangle);

//    return {
//        'dX': (_worldmapViewRectangle['x'] - _oldWorldmapViewRectangle['x']),
//        'dY': (_worldmapViewRectangle['y'] - _oldWorldmapViewRectangle['y']),
//        'dWidth': (_worldmapViewRectangle['width'] - _oldWorldmapViewRectangle['width']),
//        'dHeight': (_worldmapViewRectangle['height'] - _oldWorldmapViewRectangle['height'])
//    };
}

// Zoom animation
var _WORLDMAP_ZOOM_INTERVAL = 15; // Miliseconds of interval between zoom animations
var _WORLDMAP_ZOOM_ANIMATIONS = 25; // Number of zoom animations
//var _WORLDMAP_ZOOM_SPEED_FACTOR = 3; //
var _worldmapZoomsToProceedCounter = 0; // How many zoom animation are left to proceed
//var _worldmapZoomCurrentSpeed = 0; //

// Zoom
var _MIN_ZOOM_VALUE = 0.58; // Do not lower - below this value some weird floating things happen
var _zoomStep = 50; // Background image width quantum pixel difference
var _zoom; // Current zoom - actually lower value is bigger zoom
var _zoomMessageWasShown = false;

// Revert zoom
var _oldMapImageWidth = null;
var _oldZoom = null;
var _oldWorldmapViewRectangle = {'x': 0, 'y': 0, 'width': 0, 'height': 0};

// =========================================================================

function initializeWorldmapZoom() {
    _recalculateZoom();
}

// === Public ======================================================================

function getWorldmapZoom() {
    return _zoom;
}

function changeZoom(event, isZoomIn) {
    _zoomMessageWasShown = false;

    _worldmapZoomsToProceedCounter = _WORLDMAP_ZOOM_ANIMATIONS;
    _delayChangeZoom(event, isZoomIn);
}

// === Zoom related ==============================================================

function _delayChangeZoom(event, isZoomIn) {
    setTimeout(function () {
        _processZoom(event, isZoomIn);
    }, _WORLDMAP_ZOOM_INTERVAL);
}

function _processZoom(event, isZoomIn) {

    // Validate that we need to zoom smoothly
    if (_worldmapZoomsToProceedCounter > 0) {
        _worldmapZoomsToProceedCounter--;
//        _worldmapZoomCurrentSpeed += Math.sqrt(_WORLDMAP_ZOOM_SPEED_FACTOR);
    } else {
//        _worldmapZoomCurrentSpeed = 0;
        return;
    }

    // =========================================================================
    // Remember initial view variables
    _oldMapImageWidth = _currentWorldmapImageWidth;
    _oldZoom = _zoom;
    _oldWorldmapViewRectangle = getWorldmapViewRectangle();

    // =========================================================================
    // Revert if zoom is not allowed (too far, too close)
    if (!_changeZoomAndCheckIfAllowed(event, isZoomIn)) {
        return _revertZoom(); // Returns nothing, just exits
    }

    // Zoom is okay
    else {
        updateViewRectangle();
//        var diffInView = updateViewRectangle();
//        console.log(diffInView);
    }

    // =========================================================================
    // =========================================================================
    // Update view rectangle, make sure in bound, apply small fixes to center etc
    _afterZoomMakeSureWeReInbound(event, isZoomIn);

    // =========================================================================
    // Move every map location and change its size.
    _afterZoomUpdateMapLocations();

    // =========================================================================
    // Fire mouse move event because the map has moved
    mapMouseMove(event);

    // =========================================================================
    // Smoothly delay next zoom animation if needed
    _delayChangeZoom(event, isZoomIn);
}

function _afterZoomMakeSureWeReInbound(event, isZoomIn) {
    var topLeftCoords = getCurrentTopLeftPointMapCoordinates();
    var dX = topLeftCoords['mapX'] - _oldWorldmapViewRectangle['x'];
    var dY = topLeftCoords['mapY'] - _oldWorldmapViewRectangle['y'];

    // Enforce that the view rectangle is in bounds; moving the worldmap by [0,0] does that
    var counterModifier = 2;
    if (isZoomIn) {
        moveWorldmapBackgroundImage(_zoomStep / counterModifier, _zoomStep / counterModifier);
    } else {
        moveWorldmapBackgroundImage(_zoomStep / -counterModifier, _zoomStep / -counterModifier);
    }
}

function _afterZoomUpdateMapLocations() {

    // Recalculate margin-top for location label
    recalculateWorldmapLocationVariables();

    // Change location and size of every worldmap location
    var worldmapLocations = $(".worldmap-location");
    $.each(worldmapLocations, function (index, object) {
        var worldmapObject = $("#" + object['id']);
        var variableName = worldmapObject.attr('variableName');
        var variableIndex = worldmapObject.attr('variableIndex');
        var mapLocationObject = window[variableName][variableIndex];

        var canvasCoordinates = getCanvasCoordinatesFromMapCoordinates(
                mapLocationObject['location']['x'], mapLocationObject['location']['y']
                );

        // Change size, X and Y
        worldmapObject.css({
            'width': WORLDMAP_LOCATION_SIZE + 'px',
            'height': WORLDMAP_LOCATION_SIZE + 'px',
            'left': canvasCoordinates['canvasX'] - WORLDMAP_LOCATION_SIZE / 2,
            'top': canvasCoordinates['canvasY'] - WORLDMAP_LOCATION_SIZE / 2,
            'border-width': WORLDMAP_LOCATION_BORDER_WIDTH + 'px'
        });
    });

    // Change css for all worldmap location labels
    $(".worldmap-location label").css({
        'margin-top': WORLDMAP_LOCATION_LABEL_MARGIN_TOP + 'px',
        'margin-left': WORLDMAP_LOCATION_LABEL_MARGIN_LEFT + 'px',
    });
}

function _recalculateZoom() {
    _zoom = WORLDMAP_WIDTH / _currentWorldmapImageWidth;
}

function _changeZoomAndCheckIfAllowed(event, isZoomIn) {
    var quantumOfChange = _zoomStep; //  * _worldmapZoomCurrentSpeed
    if (isZoomIn) {
        _currentWorldmapImageWidth -= _zoomStep;
    } else {
        _currentWorldmapImageWidth += _zoomStep;
    }

    // Recalculate zoom
    _recalculateZoom();

    // === Revert zoom if too close/far =========================================

    var isZoomTooClose = _zoom < _MIN_ZOOM_VALUE; // Zoom is TOO BIG, background would be too pixel
    var isZoomTooFar = _currentWorldmapImageWidth < WORLDMAP_CANVAS_WIDTH;
    if (isZoomTooClose) {
        worldmapMessage("Maximum zoom reached!", "#f35");
        _zoomMessageWasShown = true;
        return false;
    } else if (isZoomTooFar) {
        worldmapMessage("Maximum zoom out reached!", "#2f3");
        _zoomMessageWasShown = true;
        return false;
    } else {
        return true;
    }
}

function _revertZoom() {
    _currentWorldmapImageWidth = _oldMapImageWidth;
    _zoom = _oldZoom;
    _worldmapViewRectangle = _oldWorldmapViewRectangle;
}

var WORLDMAP_WIDTH = 3500;
var WORLDMAP_HEIGHT = 3500;

// =========================================================================

window.initQueue.push(function () {
    setTimeout(function () {

        // =========================================================================
        // Create canvas and define view rectangle
        initializeWorldmap();
        initializeWorldmapView();

        // Initialize all canvas objects
        initializeWorldmapLocations();

        // Add all listeners
        initializeWorldmapEvents();
    }, 80);
});

// =========================================================================
// =========================================================================
// =========================================================================

var WORLDMAP_CANVAS_WIDTH = null;
var WORLDMAP_CANVAS_HEIGHT = null;

var WORLDMAP_CANVAS_MARGIN_LEFT = null;
var WORLDMAP_CANVAS_MARGIN_TOP = null;

var worldmap = null;

// === Initialize ======================================================================

function initializeWorldmap() {

    // =========================================================================
    // Define few layout related variables
    WORLDMAP_CANVAS_WIDTH = $(".worldmap").width();
    WORLDMAP_CANVAS_HEIGHT = $(".content-wrapper").height();

    WORLDMAP_CANVAS_MARGIN_LEFT = $(".sidebar").width();
    WORLDMAP_CANVAS_MARGIN_TOP = $(".main-header").height();
//    console.log("INIT WORLDMAP");
//    console.log("WORLDMAP_CANVAS_WIDTH = " + WORLDMAP_CANVAS_WIDTH);

    // =========================================================================
    var worldmap = $(".worldmap");
    getWorldmap().css('background-image', 'url("/img/map/map.jpg")');
}

// =========================================================================

function getWorldmap() {
    if (worldmap != null) {
        return worldmap;
    } else {
        worldmap = $(".worldmap");
        return worldmap;
    }
}