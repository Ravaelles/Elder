{"version":3,"sources":["worldmap-auxiliary.js","worldmap-coordinates.js","worldmap-element.js","worldmap-events.js","worldmap-locations.js","worldmap-messages.js","worldmap-move.js","worldmap-object.js","worldmap-objects.js","worldmap-paint.js","worldmap-view.js","worldmap-zoom.js","worldmap.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChvhIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrxtnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"worldmap.min.js","sourcesContent":["function isDefined(param) {\r\n    return typeof param != 'undefined';\r\n}\r\n\r\nfunction isUndefined(param) {\r\n    return typeof param == 'undefined';\r\n}\r\n\r\nfunction cloneObject(object) {\r\n    return JSON.parse(JSON.stringify(object));\r\n}","function getMapCoordinatesFromScreenClick(event) {\r\n\r\n    // Define click on map canvas manually, because if clicked on a child, it changes .offsetX value.\r\n    var canvasX = event.pageX - WORLDMAP_CANVAS_MARGIN_LEFT;\r\n    var canvasY = event.pageY - WORLDMAP_CANVAS_MARGIN_TOP;\r\n\r\n    return getMapCoordinatesFromCanvasCoordinates(canvasX, canvasY);\r\n}\r\n\r\nfunction getMapCoordinatesFromCanvasCoordinates(canvasX, canvasY) {\r\n\r\n    // X-related\r\n    var coordinatesOffsetX = getMapOffsetPixelsX() * getWorldmapZoom();\r\n    var mapScreenWidth = WORLDMAP_CANVAS_WIDTH * getWorldmapZoom();\r\n    var mapScreenWidthPercent = canvasX / WORLDMAP_CANVAS_WIDTH;\r\n\r\n    // Y-related\r\n    var coordinatesOffsetY = getMapOffsetPixelsY() * getWorldmapZoom();\r\n    var mapScreenHeight = WORLDMAP_CANVAS_HEIGHT * getWorldmapZoom();\r\n    var mapScreenHeightPercent = canvasY / WORLDMAP_CANVAS_HEIGHT;\r\n\r\n    // Return object\r\n    var mapX = parseInt(coordinatesOffsetX + mapScreenWidthPercent * mapScreenWidth);\r\n    var mapY = parseInt(coordinatesOffsetY + mapScreenHeightPercent * mapScreenHeight);\r\n    return {'mapX': mapX, 'mapY': mapY};\r\n}\r\n\r\nfunction getCanvasCoordinatesFromMapCoordinates(mapX, mapY) {\r\n    return {\r\n        'canvasX': WORLDMAP_CANVAS_MARGIN_LEFT + mapX / getWorldmapZoom() - getMapOffsetPixelsX() + 2,\r\n        'canvasY': WORLDMAP_CANVAS_MARGIN_TOP + mapY / getWorldmapZoom() - getMapOffsetPixelsY() + 1\r\n    };\r\n}\r\n\r\n// =========================================================================\r\n\r\nfunction getCurrentTopLeftPointMapCoordinates() {\r\n    return getMapCoordinatesFromCanvasCoordinates(0, 0);\r\n}\r\n\r\n// =========================================================================\r\n\r\nfunction coordinatesToString(coordinates) {\r\n    if ('canvasX' in coordinates) {\r\n        return \"[\" + coordinates['canvasX'] + \",\" + coordinates['canvasY'] + \"]\";\r\n    } else {\r\n        return \"[\" + coordinates['mapX'] + \",\" + coordinates['mapY'] + \"]\";\r\n    }\r\n}","function HtmlElement(left, top) {\n\n    this._id = null; // Unique identifier\n    this._selector = null; // jQuery selector of this html element\n    this._top = null; // CSS \"top\" value in pixels\n    this._left = null; // CSS \"left\" value in pixels\n    this._htmlDOM = null; // DOM element that was used to create this html element\n    this._styleString = null; // All styles for this element except \"top\" and \"left\"\n    this._htmlString = null; // Ready html string\n\n    // =========================================================================\n    // Constructor\n\n    this.constructor = function (left, top) {\n        this._id = __firstFreeWorldmapElementId++;\n        this._htmlDOM = document.createElement(\"div\");\n        this._left = left;\n        this._top = top;\n\n//        for (var fieldName in options) {\n//            var value = options[fieldName];\n//            fieldName = \"_\" + fieldName;\n//            this.fieldName = value;\n//        }\n    };\n    this.constructor(left, top);\n\n    // =========================================================================\n\n    this.getId = function () {\n        return this._id;\n    };\n\n    this.getSelector = function () {\n        if (this._selector === null) {\n            this._selector = $(\"#html-element-\" + this._id)\n        }\n        return this._selector;\n    };\n\n    // === Style ======================================================================\n\n    this.setStyle = function (styleString) {\n        this._styleString = styleString;\n        this._htmlDOM.setAttribute('id', 'html-element-' + this._id);\n        this._htmlDOM.setAttribute('style', styleString);\n    };\n\n    // === HTML elements ======================================================================\n\n    this.getHtml = function () {\n        if (this._htmlString === null) {\n            this.prepareHtml();\n        }\n        return this._htmlString;\n    };\n\n    this.prepareHtml = function () {\n        this.updateHtmlDOMPosition();\n        this._htmlString = this._htmlDOM.outerHTML;\n    };\n\n    this.updateHtmlDOMPosition = function () {\n        var style = this._styleString;\n        style += \"top:\" + this._top + \"px;\";\n        style += \"left:\" + this._left + \"px;\";\n        this._htmlDOM.setAttribute('style', style);\n    };\n\n    // === Position ======================================================================\n\n    this.translate = function (dx, dy) {\n        this._left += dx;\n        this._top += dy;\n\n        this.getSelector().css({\n            'left': this._left + 'px',\n            'top': this._top + 'px'\n        });\n    };\n\n//    this.setTop = function (top) {\n//        this._top = top;\n//    };\n\n//    this.getTop = function () {\n//        return this._top;\n//    };\n\n//    this.setLeft = function (left) {\n//        this._left = left;\n//    };\n\n//    this.getLeft = function () {\n//        return this._left;\n//    };\n\n}\n\n// =========================================================================\n\n__firstFreeWorldmapElementId = 1;\n\n","var FORBID_RIGHT_CLICK = false;\r\n\r\n// =========================================================================\r\n\r\nvar mouseIsClicked = false;\r\nvar mousePreviousPosition = null;\r\nvar mouseHasMoved = false;\r\n\r\n// === Map events ======================================================================\r\n\r\nfunction initializeWorldmapEvents() {\r\n    $(\".worldmap-location\")\r\n            .mousedown(function (event) {\r\n                mapMouseDown(event);\r\n                event.stopPropagation();\r\n            })\r\n            .mouseup(function (event) {\r\n                mapMouseUp(event);\r\n                event.stopPropagation();\r\n            })\r\n            .mousemove(function (event) {\r\n                mapMouseMove(event);\r\n                event.stopPropagation();\r\n            });\r\n\r\n    $(\".worldmap\")\r\n            .mousedown(function (event) {\r\n                mapMouseDown(event);\r\n            })\r\n            .mouseup(function (event) {\r\n                mapMouseUp(event);\r\n            })\r\n            .mousemove(function (event) {\r\n                mapMouseMove(event);\r\n            })\r\n            .mousewheel(function (event) {\r\n                mapScroll(event);\r\n            })\r\n            .mouseleave(function (event) {\r\n                mapMouseLeave(event);\r\n            })\r\n            .contextmenu(function (event) {\r\n                if (FORBID_RIGHT_CLICK) {\r\n                    event.preventDefault(); // Stop the context menu\r\n                }\r\n            });\r\n}\r\n\r\n// =========================================================================\r\n\r\nfunction mapMouseDown(event) {\r\n    worldmap = $(\".worldmap\");\r\n\r\n    // Right click\r\n    if (event.button === 2) {\r\n//        console.log(\"Right click\");\r\n//        event.preventDefault();\r\n//        event.stopPropagation()();\r\n//        return true;\r\n    }\r\n\r\n    // Left or middle click\r\n    else {\r\n//        worldmapMessage(\"Maximum zoom reached!\", \"#f35\");\r\n    }\r\n\r\n    mousePreviousPosition = event;\r\n    mouseIsClicked = true;\r\n    mouseHasMoved = false;\r\n}\r\n\r\nfunction mapMouseUp(event) {\r\n    if (!mouseHasMoved) {\r\n        mapClick(event);\r\n    }\r\n\r\n    mouseIsClicked = false;\r\n    mousePreviousPosition = null;\r\n    mouseHasMoved = false;\r\n}\r\n\r\nfunction mapMouseMove(event) {\r\n    if (mouseIsClicked) {\r\n        mouseHasMoved = true;\r\n    }\r\n\r\n    if (mouseIsClicked && mousePreviousPosition != null) {\r\n        translationVector = moveWorldmapBackgroundImage(event);\r\n        moveWorldmapObjects(translationVector);\r\n    }\r\n\r\n    mousePreviousPosition = event;\r\n\r\n    // =========================================================================\r\n    // Show coords\r\n    worldmapMessageForever(\r\n            \"Mouse points to \" + coordinatesToString(getMapCoordinatesFromScreenClick(event)), 'mouse-cords'\r\n            );\r\n}\r\n\r\nfunction mapScroll(event) {\r\n    var scrollType = event.deltaY; // 1 for wheel up, -1 for wheel down\r\n\r\n    // Wheel up\r\n    if (scrollType >= 1) {\r\n        changeZoom(event, false);\r\n    }\r\n\r\n    // Wheel down\r\n    else if (scrollType <= -1) {\r\n        changeZoom(event, true);\r\n    }\r\n\r\n    // Force mouse move event as scroll will change cursor relative position on the map\r\n    mapMouseMove(event);\r\n}\r\n\r\nfunction mapMouseLeave(event) {\r\n    if (mouseIsClicked) {\r\n        mapMouseUp(event);\r\n        mouseIsClicked = false;\r\n    }\r\n}\r\n\r\nfunction mapClick(event) {\r\n    var coordinates = getMapCoordinatesFromScreenClick(event);\r\n    gameLog('<span>[' + coordinates['mapX'] + ',' + coordinates['mapY'] + ']</span> is unknown wasteland, '\r\n            + 'not very hospitable place.');\r\n}","var WORLDMAP_LOCATION_SIZE = null;\r\nvar WORLDMAP_LOCATION_LABEL_MARGIN_LEFT = null;\r\nvar WORLDMAP_LOCATION_LABEL_MARGIN_TOP = null;\r\n\r\nvar _WORLDMAP_LOCATION_SIZE_MODIFIER = 35;\r\nvar _WORLDMAP_LOCATION_LABEL_WIDTH = 100;\r\n\r\n// =========================================================================\r\n\r\nfunction initializeWorldmapLocations() {\r\n    recalculateWorldmapLocationVariables();\r\n\r\n    worldmapLocations.forEach(function (location, index) {\r\n        getWorldmap().append(createHtmlFromLocationJson(location, index));\r\n    });\r\n}\r\n\r\n// =========================================================================\r\n\r\nfunction createHtmlFromLocationJson(location, index) {\r\n    var id = location['_id'];\r\n//    var text = location['location']['x'] + \",\" + location['location']['y'];\r\n    var text = location['name'];\r\n    var labelWidth = WORLDMAP_LOCATION_SIZE;\r\n\r\n    var canvasCoordinates = getCanvasCoordinatesFromMapCoordinates(\r\n//            location['location']['x'] - size / 2, location['location']['y'] - size / 2\r\n            location['location']['x'], location['location']['y']\r\n            );\r\n\r\n    var locationStyle = 'top:' + (canvasCoordinates['canvasY'] - WORLDMAP_LOCATION_SIZE / 2) + 'px;left:'\r\n            + (canvasCoordinates['canvasX'] - WORLDMAP_LOCATION_SIZE / 2) + 'px;'\r\n            + 'width:' + WORLDMAP_LOCATION_SIZE + 'px;height:' + WORLDMAP_LOCATION_SIZE + 'px';\r\n\r\n    var labelStyle = 'margin-top:' + WORLDMAP_LOCATION_LABEL_MARGIN_TOP\r\n            + 'px;margin-left:' + WORLDMAP_LOCATION_LABEL_MARGIN_LEFT + 'px';\r\n\r\n    return '<div class=\"worldmap-location\" id=\"worldmap-location-' + id + '\" '\r\n            + 'variableName=\"worldmapLocations\" variableIndex=\"' + index + '\" style=\"' + locationStyle + '\">'\r\n            + '<label style=\"' + labelStyle + '\">' + text + '</label>'\r\n            + '</div>';\r\n}\r\n\r\nfunction recalculateWorldmapLocationVariables() {\r\n    WORLDMAP_LOCATION_SIZE = _WORLDMAP_LOCATION_SIZE_MODIFIER / getWorldmapZoom();\r\n    WORLDMAP_LOCATION_BORDER_WIDTH = 1.5;\r\n    WORLDMAP_LOCATION_LABEL_MARGIN_TOP = _WORLDMAP_LOCATION_SIZE_MODIFIER / getWorldmapZoom() * 1.02;\r\n    WORLDMAP_LOCATION_LABEL_MARGIN_LEFT = -_WORLDMAP_LOCATION_LABEL_WIDTH / 2 + WORLDMAP_LOCATION_SIZE / 2\r\n            - WORLDMAP_LOCATION_BORDER_WIDTH + 1;\r\n}","var _WORLDMAP_MESSAGE_SHOW_TIME = 2000;\r\nvar _WORLDMAP_MESSAGE_DIM_INTERVAL = 100;\r\n\r\nvar _worldmapMessageFirstFreeId = 10000;\r\n\r\n// =========================================================================\r\n\r\nfunction gameLog(message) {\r\n    $(\".game-log p\").css('opacity', '0.7');\r\n\r\n    $(\".game-log\").prepend(\"<p style='display: none' class='game-log-invisible'><span class='dot'>•</span> \"\r\n            + message + \"</p>\");\r\n\r\n    $(\".game-log .game-log-invisible\").slideDown(700);\r\n}\r\n\r\nfunction worldmapMessageForever(text, uniqueForeverMessageId, color) {\r\n    if (typeof uniqueForeverMessageId == 'undefined') {\r\n        console.error(\"Did not pass worldmapMessageForever unique id!\");\r\n        return;\r\n    }\r\n    return worldmapMessage(text, color, uniqueForeverMessageId);\r\n}\r\n\r\nfunction worldmapMessage(text, color, uniqueForeverMessageId) {\r\n    if (color) {\r\n        color = \"color: \" + color;\r\n    }\r\n\r\n    // Define message id\r\n    var messageId = 'game-message-' + (isDefined(uniqueForeverMessageId) ?\r\n            uniqueForeverMessageId : _worldmapMessageFirstFreeId++);\r\n\r\n    // =========================================================================\r\n    // Remove previous message if needed\r\n\r\n    if (uniqueForeverMessageId) {\r\n        var message = $(\"#\" + messageId);\r\n        if (message.length > 0) {\r\n            message.text(text);\r\n            return;\r\n        }\r\n    }\r\n\r\n    // =========================================================================\r\n    // Add html element of message\r\n    $(\".game-messages\").append(\"<div class='game-message' id='\" + messageId + \"' style='width: \"\r\n            + WORLDMAP_CANVAS_WIDTH + \"px;\" + color + \";opacity:1.0'>\" + text + \"</div>\");\r\n\r\n    // =========================================================================\r\n    // Decrease message's opacity with time\r\n    if (!uniqueForeverMessageId) {\r\n        setTimeout(function () {\r\n            _dimMessageWithTime(messageId);\r\n        }, _WORLDMAP_MESSAGE_SHOW_TIME);\r\n    }\r\n}\r\n\r\n// =========================================================================\r\n\r\nfunction _dimMessageWithTime(messageId) {\r\n    var message = $(\"#\" + messageId);\r\n    var opacity = message.css('opacity');\r\n    if (opacity <= 0) {\r\n        var hideTime = 400;\r\n        message.hide(hideTime);\r\n        setTimeout(function () {\r\n            message.remove();\r\n        }, hideTime);\r\n    } else {\r\n        message.css('opacity', message.css('opacity') - 0.03);\r\n        setTimeout(function () {\r\n            _dimMessageWithTime(messageId);\r\n        }, _WORLDMAP_MESSAGE_DIM_INTERVAL + opacity * 100);\r\n    }\r\n}","var MOUSE_DRAG_MODIFIER = 1;\r\n\r\n// === Move map / objects ==============================================================\r\n\r\nfunction moveWorldmapBackgroundImage(eventOrX, yOrNull) {\r\n    if (isUndefined(yOrNull)) {\r\n        var dx = eventOrX.pageX - mousePreviousPosition.pageX;\r\n        var dy = eventOrX.pageY - mousePreviousPosition.pageY;\r\n    } else {\r\n        var dx = eventOrX;\r\n        var dy = yOrNull;\r\n    }\r\n\r\n    // =========================================================================\r\n    // Get current image position\r\n    var imagePosX = -1 * getMapOffsetPixelsX();\r\n    var imagePosY = -1 * getMapOffsetPixelsY();\r\n\r\n    // Modify variable image position\r\n    deltaImagePosX = dx;\r\n    deltaImagePosY = dy;\r\n    imagePosX += deltaImagePosX;\r\n    imagePosY += deltaImagePosY;\r\n    imagePosXWithScreenWidth = imagePosX - WORLDMAP_CANVAS_WIDTH;\r\n    imagePosYWithScreenHeight = imagePosY - WORLDMAP_CANVAS_HEIGHT;\r\n\r\n    // Force image to be horizontally in bounds\r\n    if (imagePosX > 0) {\r\n        var oldImagePosX = imagePosX;\r\n        imagePosX = 0;\r\n        deltaImagePosX -= (oldImagePosX - imagePosX);\r\n    } else if (imagePosXWithScreenWidth <= -WORLDMAP_WIDTH / getWorldmapZoom()) {\r\n        var oldImagePosX = imagePosX;\r\n        imagePosX = -WORLDMAP_WIDTH / getWorldmapZoom() + WORLDMAP_CANVAS_WIDTH;\r\n        deltaImagePosX -= (oldImagePosX - imagePosX);\r\n    }\r\n\r\n    // Force image to be vertically in bounds\r\n    if (imagePosY > 0) {\r\n        var oldImagePosY = imagePosY;\r\n        imagePosY = 0;\r\n        deltaImagePosY -= (oldImagePosY - imagePosY);\r\n    } else if (imagePosYWithScreenHeight <= -WORLDMAP_HEIGHT / getWorldmapZoom()) {\r\n        var oldImagePosY = imagePosY;\r\n        imagePosY = -WORLDMAP_HEIGHT / getWorldmapZoom() + WORLDMAP_CANVAS_HEIGHT;\r\n        deltaImagePosY -= (oldImagePosY - imagePosY);\r\n    }\r\n\r\n    // Remember current view position\r\n    updateViewRectangle(-1 * imagePosX, -1 * imagePosY);\r\n\r\n    // =========================================================================\r\n\r\n    return {dx: deltaImagePosX, dy: deltaImagePosY};\r\n}\r\n\r\nfunction moveWorldmapObjects(translationVector) {\r\n    var allWorldmapObjects = getAllWorldmapObjects();\r\n//    console.log(\"==== WORLDMAP OBJECTS =====\");\r\n    for (var key in allWorldmapObjects) {\r\n        var worldmapObject = allWorldmapObjects[key];\r\n//        console.log(worldmapObject);\r\n    }\r\n\r\n    // =========================================================================\r\n    // Locations\r\n\r\n    var mapLocations = $(\".worldmap-location\");\r\n    $.each(mapLocations, function (index, object) {\r\n        var mapObject = $(\"#\" + object['id']);\r\n        mapObject.css({\r\n            'top': parseFloat(mapObject.css('top')) + translationVector['dy'],\r\n            'left': parseFloat(mapObject.css('left')) + translationVector['dx']\r\n        });\r\n    });\r\n\r\n    // =========================================================================\r\n    // Worldmap objects\r\n\r\n    $.each(_allWorldmapObjects, function (index, worldmapObject) {\r\n        worldmapObject.translate(translationVector['dx'], translationVector['dy']);\r\n    });\r\n}","function WorldmapObject(options) {\n\n    this._id = null; // Unique identifier for the worldmap object\n    this._x = null; //\n    this._y = null; //\n    this._x2 = null; //\n    this._y2 = null; //\n    this._htmlElements = []; //\n\n    // =========================================================================\n    // Constructor\n\n    this.constructor = function (options) {\n        this._id = __firstFreeWorldmapObjectId++;\n\n        for (var fieldName in options) {\n            var value = options[fieldName];\n            fieldName = \"_\" + fieldName;\n            this.fieldName = value;\n        }\n    };\n    this.constructor(options);\n\n    this.getId = function () {\n        return this._id;\n    };\n\n    // === HTML elements ======================================================================\n\n    this.addHtmlElement = function (htmlElement) {\n        var htmlElementId = htmlElement.getId();\n        this._htmlElements[htmlElementId] = htmlElement;\n        return this;\n    };\n\n    this.getHtmlElements = function () {\n        return this._htmlElements.slice();\n    };\n\n    // === Coordinates ======================================================================\n\n    this.setCoordinates = function (x, y) {\n        this._x = x;\n        this._y = y;\n        return this;\n    };\n\n    this.setEndCoordinates = function (x2, y2) {\n        this._x2 = x2;\n        this._y2 = y2;\n        return this;\n    };\n\n    this.getCoordinates = function () {\n        return {'x': this._x, 'y': this._y};\n    };\n\n    this.translate = function (dx, dy) {\n        this._x += dx;\n        this._y += dy;\n\n        for (var htmlElementId in this._htmlElements) {\n            var htmlElementObject = this._htmlElements[htmlElementId];\n            htmlElementObject.translate(dx, dy);\n        }\n    };\n\n}\n\n// =========================================================================\n\n__firstFreeWorldmapObjectId = 1;","var _allWorldmapObjects = {};\r\n\r\n// =========================================================================\r\n\r\nfunction getAllWorldmapObjects() {\r\n    return _allWorldmapObjects;\r\n}\r\n\r\nfunction addWorldmapObject(worldmapObject) {\r\n\r\n    // For every html element, add it to the worldmap canvas\r\n    var htmlElements = worldmapObject.getHtmlElements();\r\n    for (var index in htmlElements) {\r\n        var htmlElement = htmlElements[index];\r\n        getWorldmap().append(htmlElement.getHtml());\r\n    }\r\n\r\n    // Add object to the list\r\n    _allWorldmapObjects[worldmapObject.getId()] = worldmapObject;\r\n}\r\n\r\n","WENGINE_DEFAULT_LINE_WIDTH = 1;\r\n\r\n// =========================================================================\r\n\r\nwindow.initQueue.push(function () {\r\n    setTimeout(function () {\r\n        var rect = getWorldmapViewRectangle();\r\n        var TEMP = 30;\r\n\r\n        rect['x'] += TEMP;\r\n        rect['y'] += TEMP;\r\n        rect['width'] -= 2 * TEMP + WENGINE_DEFAULT_LINE_WIDTH;\r\n        rect['height'] -= 2 * TEMP + WENGINE_DEFAULT_LINE_WIDTH;\r\n        rect['width'] /= getWorldmapZoom();\r\n        rect['height'] /= getWorldmapZoom();\r\n\r\n//        WEngine_paintRectangleFromArray(rect, {'background-color': 'transparent'});\r\n        paintTest();\r\n    }, 160);\r\n});\r\n\r\n// =========================================================================\r\n\r\nvar testLineX1;\r\nvar testLineY1;\r\nvar testLineX2;\r\nvar testLineY2;\r\nfunction paintTest() {\r\n    testLineX1 = _WORLDMAP_IMAGE_INITIAL_X + 300;\r\n    testLineY1 = _WORLDMAP_IMAGE_INITIAL_Y + 400;\r\n    testLineX2 = testLineX1;\r\n    testLineY2 = testLineY1;\r\n\r\n    var line = WEngine_paintLine(testLineX1, testLineY1, testLineX2, testLineY2);\r\n    console.log(line);\r\n\r\n    setTimeout(function () {\r\n        testLineX2\r\n    }, 100);\r\n}\r\n\r\n// === Public ======================================================================\r\n\r\nfunction WEngine_paintLine(x1, y1, x2, y2, options, worldmapObject) {\r\n    //    console.log(\"Line: \" + x1 + \",\" + y1 + \" / \" + x2 + \",\" + y2);\r\n    canvasCoords = getCanvasCoordinatesFromMapCoordinates(x1, y1);\r\n    x1 = canvasCoords['canvasX'];\r\n    y1 = canvasCoords['canvasY'];\r\n    canvasCoords = getCanvasCoordinatesFromMapCoordinates(x2, y2);\r\n    x2 = canvasCoords['canvasX'];\r\n    y2 = canvasCoords['canvasY'];\r\n\r\n    var line = _WEngine_getLine(x1, y1, x2, y2, options);\r\n\r\n    // =========================================================================\r\n    // Worldmap object related - automatically create only if no worldmapObject was passed\r\n    if (isUndefined(worldmapObject)) {\r\n        worldmapObject = new WorldmapObject();\r\n        worldmapObject.setCoordinates(x1, y1);\r\n        worldmapObject.setEndCoordinates(x2, y2);\r\n        worldmapObject.addHtmlElement(line);\r\n        addWorldmapObject(worldmapObject);\r\n\r\n        // Return WORLDMAP OBJECT\r\n        return worldmapObject;\r\n    }\r\n\r\n    // If passed existing WorldmapObject return HTML ELEMENT\r\n    else {\r\n        return line;\r\n    }\r\n}\r\n\r\nfunction WEngine_paintRectangleFromArray(array, options) {\r\n    return WEngine_paintRectangle(\r\n            array['x'], array['y'], array['x'] + array['width'], array['y'] + array['height'], options\r\n            );\r\n}\r\n\r\nfunction WEngine_paintRectangle(x1, y1, x2, y2, options) {\r\n    var worldmapObject = new WorldmapObject();\r\n    worldmapObject.setCoordinates(x1, y1);\r\n    worldmapObject.setEndCoordinates(x2, y2);\r\n\r\n    worldmapObject.addHtmlElement(WEngine_paintLine(x1, y1, x2, y1, options, worldmapObject)); // Horiz Top\r\n    worldmapObject.addHtmlElement(WEngine_paintLine(x1, y2, x2, y2, options, worldmapObject)); // Horiz Bottom\r\n    worldmapObject.addHtmlElement(WEngine_paintLine(x1, y1, x1, y2, options, worldmapObject)); // Vert Left\r\n    worldmapObject.addHtmlElement(WEngine_paintLine(x2, y1, x2, y2, options, worldmapObject)); // Vert Right\r\n\r\n    addWorldmapObject(worldmapObject);\r\n    return worldmapObject;\r\n}\r\n\r\n// === Private ======================================================================\r\n\r\nfunction _WEngine_getLine(x1, y1, x2, y2, options) {\r\n    var a = x1 - x2,\r\n            b = y1 - y2,\r\n            c = Math.sqrt(a * a + b * b);\r\n\r\n    var sx = (x1 + x2) / 2,\r\n            sy = (y1 + y2) / 2;\r\n\r\n    var x = sx - c / 2,\r\n            y = sy;\r\n\r\n    var alpha = Math.PI - Math.atan2(-b, a);\r\n\r\n    return _WEngine_getLine_element(x, y, c, alpha, options);\r\n}\r\n\r\n// === Html elements ======================================================================\r\n\r\n//function _WEngine_getLine_element(x, y, length, angle, options) {\r\n//    var line = document.createElement(\"div\");\r\n//    var styles = 'border: ' + WENGINE_DEFAULT_LINE_WIDTH + 'px dashed red; '\r\n//            + 'width: ' + length + 'px; '\r\n//            + 'height: 0px; '\r\n//            + '-moz-transform: rotate(' + angle + 'rad); '\r\n//            + '-webkit-transform: rotate(' + angle + 'rad); '\r\n//            + '-o-transform: rotate(' + angle + 'rad); '\r\n//            + '-ms-transform: rotate(' + angle + 'rad); '\r\n//            + 'position: absolute; '\r\n//            + 'top: ' + y + 'px; '\r\n//            + 'left: ' + x + 'px; ';\r\n//\r\n//    if (isDefined(options)) {\r\n//        for (var option in options) {\r\n//            styles += option + ':' + options[option] + ';';\r\n//        }\r\n//    }\r\n//\r\n//    line.setAttribute('style', styles);\r\n//    _WEngine_assignIdToHtmlElement(line);\r\n//    return line;\r\n//}\r\nfunction _WEngine_getLine_element(x, y, length, angle, options) {\r\n    var lineHtmlElement = new HtmlElement(x, y);\r\n    var style = 'border: ' + WENGINE_DEFAULT_LINE_WIDTH + 'px dashed red; '\r\n            + 'width: ' + length + 'px; '\r\n            + 'height: 0px; '\r\n            + '-moz-transform: rotate(' + angle + 'rad); '\r\n            + '-webkit-transform: rotate(' + angle + 'rad); '\r\n            + '-o-transform: rotate(' + angle + 'rad); '\r\n            + '-ms-transform: rotate(' + angle + 'rad); '\r\n            + 'position: absolute; ';\r\n//            + 'top: ' + y + 'px; '\r\n//            + 'left: ' + x + 'px; ';;\r\n\r\n    if (isDefined(options)) {\r\n        for (var option in options) {\r\n            style += option + ':' + options[option] + ';';\r\n        }\r\n    }\r\n\r\n    lineHtmlElement.setStyle(style);\r\n    return lineHtmlElement;\r\n}\r\n\r\n// =========================================================================\r\n\r\n//function _WEngine_assignIdToHtmlElement(element) {\r\n//    __lastHtmlElementId = (__firstFreeWorldmapObjectHtmlElementId++);\r\n//    element.setAttribute('id', 'html-element-' + __lastHtmlElementId);\r\n//    return __lastHtmlElementId;\r\n//}\r\n\r\n__firstFreeWorldmapObjectHtmlElementId = 100;\r\n//__lastHtmlElementId = null;","\r\n// Initial view settings\r\nvar _WORLDMAP_IMAGE_INITIAL_WIDTH = 3500;\r\nvar _WORLDMAP_IMAGE_INITIAL_X = 1000;\r\nvar _WORLDMAP_IMAGE_INITIAL_Y = 1000;\r\n\r\n// View rectangle\r\nvar _worldmapViewRectangle = null;\r\nvar _currentWorldmapImageWidth = null;\r\nvar _currentWorldmapImageHeight = null;\r\n\r\n// === Set up view & zoom ===================================================\r\n\r\nfunction initializeWorldmapView() {\r\n\r\n    // Define rectangle view width and height\r\n    _currentWorldmapImageWidth = _WORLDMAP_IMAGE_INITIAL_WIDTH;\r\n    _currentWorldmapImageHeight = _currentWorldmapImageWidth * WORLDMAP_CANVAS_WIDTH / WORLDMAP_CANVAS_HEIGHT;\r\n\r\n    // Definte rectangle view\r\n    _worldmapViewRectangle = {\r\n        'x': _WORLDMAP_IMAGE_INITIAL_X,\r\n        'y': _WORLDMAP_IMAGE_INITIAL_Y,\r\n        'width': WORLDMAP_CANVAS_WIDTH,\r\n        'height': WORLDMAP_CANVAS_HEIGHT\r\n    };\r\n\r\n    // Init zoom\r\n    initializeWorldmapZoom();\r\n\r\n    // Assign proper values for background image\r\n    updateViewRectangle(_worldmapViewRectangle['x'], _worldmapViewRectangle['y']);\r\n}\r\n\r\n// === Public ======================================================================\r\n\r\nfunction getWorldmapViewRectangle() {\r\n    return cloneObject(_worldmapViewRectangle);\r\n}\r\n\r\nfunction getWorldmapViewRectangleWidth() {\r\n    return _worldmapViewRectangle['width'];\r\n}\r\n\r\nfunction getWorldmapViewRectangleHeight() {\r\n    return _worldmapViewRectangle['height'];\r\n}\r\n\r\nfunction getMapOffsetPixelsX() {\r\n    return _worldmapViewRectangle['x'];\r\n}\r\n\r\nfunction getMapOffsetPixelsY() {\r\n    return _worldmapViewRectangle['y'];\r\n}\r\n\r\nfunction updateViewRectangle(xOrObject, yOrObject) {\r\n\r\n    // If params are defined, it means we need to move by view rectangle [x,y]\r\n    if (isDefined(xOrObject)) {\r\n        var newX, newY;\r\n        if (xOrObject != null) {\r\n            newX = Math.abs(xOrObject);\r\n            newY = Math.abs(yOrObject);\r\n        } else {\r\n            newX = Math.abs(xOrObject['x']);\r\n            newY = Math.abs(yOrObject['y']);\r\n        }\r\n\r\n        _worldmapViewRectangle['x'] = newX;\r\n        _worldmapViewRectangle['y'] = newY;\r\n\r\n        // Update background image position\r\n        getWorldmap().css({\r\n            'background-position': -newX + \"px \" + -newY + \"px\"\r\n        });\r\n    }\r\n\r\n    // Update width and height of view rectangle\r\n    _worldmapViewRectangle['width'] = WORLDMAP_CANVAS_WIDTH / getWorldmapZoom();\r\n    _worldmapViewRectangle['height'] = WORLDMAP_CANVAS_HEIGHT / getWorldmapZoom();\r\n\r\n    // Update background image size\r\n    getWorldmap().css({\r\n        'background-size': _currentWorldmapImageWidth + \"px auto\"\r\n    });\r\n\r\n    // =========================================================================\r\n    // Return difference in view rectangle field values\r\n\r\n//    console.log('');\r\n//    console.log(\"NEW:\");\r\n//    console.log(_worldmapViewRectangle);\r\n//    console.log(\"OLD\");\r\n//    console.log(_oldWorldmapViewRectangle);\r\n\r\n//    return {\r\n//        'dX': (_worldmapViewRectangle['x'] - _oldWorldmapViewRectangle['x']),\r\n//        'dY': (_worldmapViewRectangle['y'] - _oldWorldmapViewRectangle['y']),\r\n//        'dWidth': (_worldmapViewRectangle['width'] - _oldWorldmapViewRectangle['width']),\r\n//        'dHeight': (_worldmapViewRectangle['height'] - _oldWorldmapViewRectangle['height'])\r\n//    };\r\n}","\n// Zoom animation\nvar _WORLDMAP_ZOOM_INTERVAL = 15; // Miliseconds of interval between zoom animations\nvar _WORLDMAP_ZOOM_ANIMATIONS = 25; // Number of zoom animations\n//var _WORLDMAP_ZOOM_SPEED_FACTOR = 3; //\nvar _worldmapZoomsToProceedCounter = 0; // How many zoom animation are left to proceed\n//var _worldmapZoomCurrentSpeed = 0; //\n\n// Zoom\nvar _MIN_ZOOM_VALUE = 0.58; // Do not lower - below this value some weird floating things happen\nvar _zoomStep = 50; // Background image width quantum pixel difference\nvar _zoom; // Current zoom - actually lower value is bigger zoom\nvar _zoomMessageWasShown = false;\n\n// Revert zoom\nvar _oldMapImageWidth = null;\nvar _oldZoom = null;\nvar _oldWorldmapViewRectangle = {'x': 0, 'y': 0, 'width': 0, 'height': 0};\n\n// =========================================================================\n\nfunction initializeWorldmapZoom() {\n    _recalculateZoom();\n}\n\n// === Public ======================================================================\n\nfunction getWorldmapZoom() {\n    return _zoom;\n}\n\nfunction changeZoom(event, isZoomIn) {\n    _zoomMessageWasShown = false;\n\n    _worldmapZoomsToProceedCounter = _WORLDMAP_ZOOM_ANIMATIONS;\n    _delayChangeZoom(event, isZoomIn);\n}\n\n// === Zoom related ==============================================================\n\nfunction _delayChangeZoom(event, isZoomIn) {\n    setTimeout(function () {\n        _processZoom(event, isZoomIn);\n    }, _WORLDMAP_ZOOM_INTERVAL);\n}\n\nfunction _processZoom(event, isZoomIn) {\n\n    // Validate that we need to zoom smoothly\n    if (_worldmapZoomsToProceedCounter > 0) {\n        _worldmapZoomsToProceedCounter--;\n//        _worldmapZoomCurrentSpeed += Math.sqrt(_WORLDMAP_ZOOM_SPEED_FACTOR);\n    } else {\n//        _worldmapZoomCurrentSpeed = 0;\n        return;\n    }\n\n    // =========================================================================\n    // Remember initial view variables\n    _oldMapImageWidth = _currentWorldmapImageWidth;\n    _oldZoom = _zoom;\n    _oldWorldmapViewRectangle = getWorldmapViewRectangle();\n\n    // =========================================================================\n    // Revert if zoom is not allowed (too far, too close)\n    if (!_changeZoomAndCheckIfAllowed(event, isZoomIn)) {\n        return _revertZoom(); // Returns nothing, just exits\n    }\n\n    // Zoom is okay\n    else {\n        updateViewRectangle();\n//        var diffInView = updateViewRectangle();\n//        console.log(diffInView);\n    }\n\n    // =========================================================================\n    // =========================================================================\n    // Update view rectangle, make sure in bound, apply small fixes to center etc\n    _afterZoomMakeSureWeReInbound(event, isZoomIn);\n\n    // =========================================================================\n    // Move every map location and change its size.\n    _afterZoomUpdateMapLocations();\n\n    // =========================================================================\n    // Fire mouse move event because the map has moved\n    mapMouseMove(event);\n\n    // =========================================================================\n    // Smoothly delay next zoom animation if needed\n    _delayChangeZoom(event, isZoomIn);\n}\n\nfunction _afterZoomMakeSureWeReInbound(event, isZoomIn) {\n    var topLeftCoords = getCurrentTopLeftPointMapCoordinates();\n    var dX = topLeftCoords['mapX'] - _oldWorldmapViewRectangle['x'];\n    var dY = topLeftCoords['mapY'] - _oldWorldmapViewRectangle['y'];\n\n    // Enforce that the view rectangle is in bounds; moving the worldmap by [0,0] does that\n    var counterModifier = 2;\n    if (isZoomIn) {\n        moveWorldmapBackgroundImage(_zoomStep / counterModifier, _zoomStep / counterModifier);\n    } else {\n        moveWorldmapBackgroundImage(_zoomStep / -counterModifier, _zoomStep / -counterModifier);\n    }\n}\n\nfunction _afterZoomUpdateMapLocations() {\n\n    // Recalculate margin-top for location label\n    recalculateWorldmapLocationVariables();\n\n    // Change location and size of every worldmap location\n    var worldmapLocations = $(\".worldmap-location\");\n    $.each(worldmapLocations, function (index, object) {\n        var worldmapObject = $(\"#\" + object['id']);\n        var variableName = worldmapObject.attr('variableName');\n        var variableIndex = worldmapObject.attr('variableIndex');\n        var mapLocationObject = window[variableName][variableIndex];\n\n        var canvasCoordinates = getCanvasCoordinatesFromMapCoordinates(\n                mapLocationObject['location']['x'], mapLocationObject['location']['y']\n                );\n\n        // Change size, X and Y\n        worldmapObject.css({\n            'width': WORLDMAP_LOCATION_SIZE + 'px',\n            'height': WORLDMAP_LOCATION_SIZE + 'px',\n            'left': canvasCoordinates['canvasX'] - WORLDMAP_LOCATION_SIZE / 2,\n            'top': canvasCoordinates['canvasY'] - WORLDMAP_LOCATION_SIZE / 2,\n            'border-width': WORLDMAP_LOCATION_BORDER_WIDTH + 'px'\n        });\n    });\n\n    // Change css for all worldmap location labels\n    $(\".worldmap-location label\").css({\n        'margin-top': WORLDMAP_LOCATION_LABEL_MARGIN_TOP + 'px',\n        'margin-left': WORLDMAP_LOCATION_LABEL_MARGIN_LEFT + 'px',\n    });\n}\n\nfunction _recalculateZoom() {\n    _zoom = WORLDMAP_WIDTH / _currentWorldmapImageWidth;\n}\n\nfunction _changeZoomAndCheckIfAllowed(event, isZoomIn) {\n    var quantumOfChange = _zoomStep; //  * _worldmapZoomCurrentSpeed\n    if (isZoomIn) {\n        _currentWorldmapImageWidth -= _zoomStep;\n    } else {\n        _currentWorldmapImageWidth += _zoomStep;\n    }\n\n    // Recalculate zoom\n    _recalculateZoom();\n\n    // === Revert zoom if too close/far =========================================\n\n    var isZoomTooClose = _zoom < _MIN_ZOOM_VALUE; // Zoom is TOO BIG, background would be too pixel\n    var isZoomTooFar = _currentWorldmapImageWidth < WORLDMAP_CANVAS_WIDTH;\n    if (isZoomTooClose) {\n        worldmapMessage(\"Maximum zoom reached!\", \"#f35\");\n        _zoomMessageWasShown = true;\n        return false;\n    } else if (isZoomTooFar) {\n        worldmapMessage(\"Maximum zoom out reached!\", \"#2f3\");\n        _zoomMessageWasShown = true;\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfunction _revertZoom() {\n    _currentWorldmapImageWidth = _oldMapImageWidth;\n    _zoom = _oldZoom;\n    _worldmapViewRectangle = _oldWorldmapViewRectangle;\n}\n","var WORLDMAP_WIDTH = 3500;\r\nvar WORLDMAP_HEIGHT = 3500;\r\n\r\n// =========================================================================\r\n\r\nwindow.initQueue.push(function () {\r\n    setTimeout(function () {\r\n\r\n        // =========================================================================\r\n        // Create canvas and define view rectangle\r\n        initializeWorldmap();\r\n        initializeWorldmapView();\r\n\r\n        // Initialize all canvas objects\r\n        initializeWorldmapLocations();\r\n\r\n        // Add all listeners\r\n        initializeWorldmapEvents();\r\n    }, 80);\r\n});\r\n\r\n// =========================================================================\r\n// =========================================================================\r\n// =========================================================================\r\n\r\nvar WORLDMAP_CANVAS_WIDTH = null;\r\nvar WORLDMAP_CANVAS_HEIGHT = null;\r\n\r\nvar WORLDMAP_CANVAS_MARGIN_LEFT = null;\r\nvar WORLDMAP_CANVAS_MARGIN_TOP = null;\r\n\r\nvar worldmap = null;\r\n\r\n// === Initialize ======================================================================\r\n\r\nfunction initializeWorldmap() {\r\n\r\n    // =========================================================================\r\n    // Define few layout related variables\r\n    WORLDMAP_CANVAS_WIDTH = $(\".worldmap\").width();\r\n    WORLDMAP_CANVAS_HEIGHT = $(\".content-wrapper\").height();\r\n\r\n    WORLDMAP_CANVAS_MARGIN_LEFT = $(\".sidebar\").width();\r\n    WORLDMAP_CANVAS_MARGIN_TOP = $(\".main-header\").height();\r\n//    console.log(\"INIT WORLDMAP\");\r\n//    console.log(\"WORLDMAP_CANVAS_WIDTH = \" + WORLDMAP_CANVAS_WIDTH);\r\n\r\n    // =========================================================================\r\n    var worldmap = $(\".worldmap\");\r\n    getWorldmap().css('background-image', 'url(\"/img/map/map.jpg\")');\r\n}\r\n\r\n// =========================================================================\r\n\r\nfunction getWorldmap() {\r\n    if (worldmap != null) {\r\n        return worldmap;\r\n    } else {\r\n        worldmap = $(\".worldmap\");\r\n        return worldmap;\r\n    }\r\n}"],"sourceRoot":"/source/"}